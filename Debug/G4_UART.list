
G4_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005240  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a4  080054a4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a8  080054a8  000154a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080054ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08005508  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08005508  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011126  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002665  00000000  00000000  000311f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00033860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2d  00000000  00000000  00034590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025276  00000000  00000000  00034fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012524  00000000  00000000  0005a233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea9a2  00000000  00000000  0006c757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a50  00000000  00000000  001570fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015ab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005408 	.word	0x08005408

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005408 	.word	0x08005408

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <MX_GPIO_Init+0xe8>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a33      	ldr	r2, [pc, #204]	; (80006a4 <MX_GPIO_Init+0xe8>)
 80005d8:	f043 0320 	orr.w	r3, r3, #32
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <MX_GPIO_Init+0xe8>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0320 	and.w	r3, r3, #32
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <MX_GPIO_Init+0xe8>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	4a2d      	ldr	r2, [pc, #180]	; (80006a4 <MX_GPIO_Init+0xe8>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <MX_GPIO_Init+0xe8>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <MX_GPIO_Init+0xe8>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_GPIO_Init+0xe8>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f000 feed 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2104      	movs	r1, #4
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <MX_GPIO_Init+0xec>)
 800065c:	f000 fee8 	bl	8001430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000660:	2320      	movs	r3, #32
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067a:	f000 fd57 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800067e:	2304      	movs	r3, #4
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_GPIO_Init+0xec>)
 8000696:	f000 fd49 	bl	800112c <HAL_GPIO_Init>

}
 800069a:	bf00      	nop
 800069c:	3728      	adds	r7, #40	; 0x28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	48000c00 	.word	0x48000c00

080006ac <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_I2C4_Init+0x74>)
 80006b2:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <MX_I2C4_Init+0x78>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909BEB;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_I2C4_Init+0x74>)
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <MX_I2C4_Init+0x7c>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_I2C4_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_I2C4_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_I2C4_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_I2C4_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C4_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C4_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C4_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <MX_I2C4_Init+0x74>)
 80006e8:	f000 fed4 	bl	8001494 <HAL_I2C_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80006f2:	f000 f91c 	bl	800092e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <MX_I2C4_Init+0x74>)
 80006fa:	f001 fcd8 	bl	80020ae <HAL_I2CEx_ConfigAnalogFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000704:	f000 f913 	bl	800092e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_I2C4_Init+0x74>)
 800070c:	f001 fd1a 	bl	8002144 <HAL_I2CEx_ConfigDigitalFilter>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000716:	f000 f90a 	bl	800092e <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000078 	.word	0x20000078
 8000724:	40008400 	.word	0x40008400
 8000728:	00909beb 	.word	0x00909beb

0800072c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b0a0      	sub	sp, #128	; 0x80
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000744:	f107 0318 	add.w	r3, r7, #24
 8000748:	2254      	movs	r2, #84	; 0x54
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f004 f9d7 	bl	8004b00 <memset>
  if(i2cHandle->Instance==I2C4)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a35      	ldr	r2, [pc, #212]	; (800082c <HAL_I2C_MspInit+0x100>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d162      	bne.n	8000822 <HAL_I2C_MspInit+0xf6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800075c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000760:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000762:	2300      	movs	r3, #0
 8000764:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fb0e 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000776:	f000 f8da 	bl	800092e <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <HAL_I2C_MspInit+0x104>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <HAL_I2C_MspInit+0x104>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <HAL_I2C_MspInit+0x104>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <HAL_I2C_MspInit+0x104>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a26      	ldr	r2, [pc, #152]	; (8000830 <HAL_I2C_MspInit+0x104>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <HAL_I2C_MspInit+0x104>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ae:	2312      	movs	r3, #18
 80007b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 80007ba:	2308      	movs	r3, #8
 80007bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007c2:	4619      	mov	r1, r3
 80007c4:	481b      	ldr	r0, [pc, #108]	; (8000834 <HAL_I2C_MspInit+0x108>)
 80007c6:	f000 fcb1 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007ca:	2380      	movs	r3, #128	; 0x80
 80007cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ce:	2312      	movs	r3, #18
 80007d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80007da:	2303      	movs	r3, #3
 80007dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007e2:	4619      	mov	r1, r3
 80007e4:	4814      	ldr	r0, [pc, #80]	; (8000838 <HAL_I2C_MspInit+0x10c>)
 80007e6:	f000 fca1 	bl	800112c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_I2C_MspInit+0x104>)
 80007ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <HAL_I2C_MspInit+0x104>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <HAL_I2C_MspInit+0x104>)
 80007f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2052      	movs	r0, #82	; 0x52
 8000808:	f000 fb8d 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800080c:	2052      	movs	r0, #82	; 0x52
 800080e:	f000 fba4 	bl	8000f5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	2053      	movs	r0, #83	; 0x53
 8000818:	f000 fb85 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800081c:	2053      	movs	r0, #83	; 0x53
 800081e:	f000 fb9c 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000822:	bf00      	nop
 8000824:	3780      	adds	r7, #128	; 0x80
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40008400 	.word	0x40008400
 8000830:	40021000 	.word	0x40021000
 8000834:	48000800 	.word	0x48000800
 8000838:	48000400 	.word	0x48000400

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f000 fa02 	bl	8000c4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 f827 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f7ff feb7 	bl	80005bc <MX_GPIO_Init>
  MX_I2C4_Init();
 800084e:	f7ff ff2d 	bl	80006ac <MX_I2C4_Init>
  MX_USART2_UART_Init();
 8000852:	f000 f925 	bl	8000aa0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  uint8_t msg[10];
	  sprintf(msg,"%d \r\n\0", i);
 800085a:	463b      	mov	r3, r7
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	490b      	ldr	r1, [pc, #44]	; (800088c <main+0x50>)
 8000860:	4618      	mov	r0, r3
 8000862:	f004 f92d 	bl	8004ac0 <siprintf>
	  HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
 8000866:	463b      	mov	r3, r7
 8000868:	220a      	movs	r2, #10
 800086a:	4619      	mov	r1, r3
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <main+0x54>)
 800086e:	f002 fd2b 	bl	80032c8 <HAL_UART_Transmit_IT>
	  HAL_Delay(500);
 8000872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000876:	f000 fa59 	bl	8000d2c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 800087a:	2104      	movs	r1, #4
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <main+0x58>)
 800087e:	f000 fdef 	bl	8001460 <HAL_GPIO_TogglePin>
	  i++;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	3301      	adds	r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
  {
 8000888:	e7e7      	b.n	800085a <main+0x1e>
 800088a:	bf00      	nop
 800088c:	08005420 	.word	0x08005420
 8000890:	200000c8 	.word	0x200000c8
 8000894:	48000c00 	.word	0x48000c00

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0318 	add.w	r3, r7, #24
 80008a2:	2238      	movs	r2, #56	; 0x38
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f004 f92a 	bl	8004b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f001 fc8e 	bl	80021dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	2303      	movs	r3, #3
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008d6:	2328      	movs	r3, #40	; 0x28
 80008d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fd1a 	bl	8002324 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80008f6:	f000 f81a 	bl	800092e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000906:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000910:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2104      	movs	r1, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f002 f81c 	bl	8002954 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000922:	f000 f804 	bl	800092e <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	; 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000932:	b672      	cpsid	i
}
 8000934:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000936:	e7fe      	b.n	8000936 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_MspInit+0x44>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6613      	str	r3, [r2, #96]	; 0x60
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	; 0x58
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f990 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <USART2_IRQHandler+0x10>)
 80009da:	f002 fd1d 	bl	8003418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000c8 	.word	0x200000c8

080009e8 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <I2C4_EV_IRQHandler+0x10>)
 80009ee:	f000 fde0 	bl	80015b2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000078 	.word	0x20000078

080009fc <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <I2C4_ER_IRQHandler+0x10>)
 8000a02:	f000 fdf0 	bl	80015e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000078 	.word	0x20000078

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d207      	bcs.n	8000a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a40:	f004 f866 	bl	8004b10 <__errno>
 8000a44:	4603      	mov	r3, r0
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	e009      	b.n	8000a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <_sbrk+0x64>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20020000 	.word	0x20020000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	200000c4 	.word	0x200000c4
 8000a78:	200002a8 	.word	0x200002a8

08000a7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000aa6:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <MX_USART2_UART_Init+0x94>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000aea:	f002 fb9d 	bl	8003228 <HAL_UART_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000af4:	f7ff ff1b 	bl	800092e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000afc:	f003 ff15 	bl	800492a <HAL_UARTEx_SetTxFifoThreshold>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b06:	f7ff ff12 	bl	800092e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000b0e:	f003 ff4a 	bl	80049a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b18:	f7ff ff09 	bl	800092e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_USART2_UART_Init+0x90>)
 8000b1e:	f003 fecb 	bl	80048b8 <HAL_UARTEx_DisableFifoMode>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b28:	f7ff ff01 	bl	800092e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000c8 	.word	0x200000c8
 8000b34:	40004400 	.word	0x40004400

08000b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09e      	sub	sp, #120	; 0x78
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	2254      	movs	r2, #84	; 0x54
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 ffd1 	bl	8004b00 <memset>
  if(uartHandle->Instance==USART2)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <HAL_UART_MspInit+0xb8>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d13e      	bne.n	8000be6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 f909 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b80:	f7ff fed5 	bl	800092e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_UART_MspInit+0xbc>)
 8000b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b88:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <HAL_UART_MspInit+0xbc>)
 8000b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_UART_MspInit+0xbc>)
 8000b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_UART_MspInit+0xbc>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <HAL_UART_MspInit+0xbc>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_UART_MspInit+0xbc>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb4:	230c      	movs	r3, #12
 8000bb6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd2:	f000 faab 	bl	800112c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2026      	movs	r0, #38	; 0x26
 8000bdc:	f000 f9a3 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000be0:	2026      	movs	r0, #38	; 0x26
 8000be2:	f000 f9ba 	bl	8000f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	3778      	adds	r7, #120	; 0x78
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40004400 	.word	0x40004400
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c22:	f7ff ff2b 	bl	8000a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f003 ff79 	bl	8004b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c2a:	f7ff fe07 	bl	800083c <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   r0, =_estack
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c3c:	080054ac 	.word	0x080054ac
  ldr r2, =_sbss
 8000c40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c44:	200002a4 	.word	0x200002a4

08000c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_2_IRQHandler>

08000c4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f95b 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f80e 	bl	8000c7c <HAL_InitTick>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	71fb      	strb	r3, [r7, #7]
 8000c6a:	e001      	b.n	8000c70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c6c:	f7ff fe64 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c70:	79fb      	ldrb	r3, [r7, #7]

}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_InitTick+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d022      	beq.n	8000cd6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_InitTick+0x6c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_InitTick+0x68>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f966 	bl	8000f76 <HAL_SYSTICK_Config>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10f      	bne.n	8000cd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b0f      	cmp	r3, #15
 8000cb4:	d809      	bhi.n	8000cca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbe:	f000 f932 	bl	8000f26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_InitTick+0x70>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	e007      	b.n	8000cda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	e004      	b.n	8000cda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	e001      	b.n	8000cda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <HAL_IncTick+0x1c>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_IncTick+0x20>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <HAL_IncTick+0x1c>)
 8000d00:	6013      	str	r3, [r2, #0]
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20000158 	.word	0x20000158
 8000d10:	20000008 	.word	0x20000008

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000158 	.word	0x20000158

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d004      	beq.n	8000d50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_Delay+0x40>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d50:	bf00      	nop
 8000d52:	f7ff ffdf 	bl	8000d14 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d8f7      	bhi.n	8000d52 <HAL_Delay+0x26>
  {
  }
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000008 	.word	0x20000008

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff40 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ff90 	bl	8000e64 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff5f 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff33 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ffa4 	bl	8000ecc <SysTick_Config>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d005      	beq.n	8000fb2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2204      	movs	r2, #4
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e037      	b.n	8001022 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 020e 	bic.w	r2, r2, #14
 8000fc0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fd0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0201 	bic.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f003 021f 	and.w	r2, r3, #31
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	2101      	movs	r1, #1
 8000ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ffe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00c      	beq.n	8001022 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001016:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001020:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d00d      	beq.n	8001074 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2204      	movs	r2, #4
 800105c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e047      	b.n	8001104 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 020e 	bic.w	r2, r2, #14
 8001082:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00c      	beq.n	80010e4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4798      	blx	r3
    }
  }
  return status;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800111c:	b2db      	uxtb	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800113a:	e15a      	b.n	80013f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 814c 	beq.w	80013ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d005      	beq.n	800116c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001168:	2b02      	cmp	r3, #2
 800116a:	d130      	bne.n	80011ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a2:	2201      	movs	r2, #1
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	091b      	lsrs	r3, r3, #4
 80011b8:	f003 0201 	and.w	r2, r3, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d017      	beq.n	800120a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	689a      	ldr	r2, [r3, #8]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d123      	bne.n	800125e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0203 	and.w	r2, r3, #3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80a6 	beq.w	80013ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a0:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_GPIO_Init+0x2e4>)
 80012a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a4:	4a5a      	ldr	r2, [pc, #360]	; (8001410 <HAL_GPIO_Init+0x2e4>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6613      	str	r3, [r2, #96]	; 0x60
 80012ac:	4b58      	ldr	r3, [pc, #352]	; (8001410 <HAL_GPIO_Init+0x2e4>)
 80012ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b8:	4a56      	ldr	r2, [pc, #344]	; (8001414 <HAL_GPIO_Init+0x2e8>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e2:	d01f      	beq.n	8001324 <HAL_GPIO_Init+0x1f8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <HAL_GPIO_Init+0x2ec>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d019      	beq.n	8001320 <HAL_GPIO_Init+0x1f4>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a4b      	ldr	r2, [pc, #300]	; (800141c <HAL_GPIO_Init+0x2f0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d013      	beq.n	800131c <HAL_GPIO_Init+0x1f0>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a4a      	ldr	r2, [pc, #296]	; (8001420 <HAL_GPIO_Init+0x2f4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d00d      	beq.n	8001318 <HAL_GPIO_Init+0x1ec>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a49      	ldr	r2, [pc, #292]	; (8001424 <HAL_GPIO_Init+0x2f8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d007      	beq.n	8001314 <HAL_GPIO_Init+0x1e8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x2fc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d101      	bne.n	8001310 <HAL_GPIO_Init+0x1e4>
 800130c:	2305      	movs	r3, #5
 800130e:	e00a      	b.n	8001326 <HAL_GPIO_Init+0x1fa>
 8001310:	2306      	movs	r3, #6
 8001312:	e008      	b.n	8001326 <HAL_GPIO_Init+0x1fa>
 8001314:	2304      	movs	r3, #4
 8001316:	e006      	b.n	8001326 <HAL_GPIO_Init+0x1fa>
 8001318:	2303      	movs	r3, #3
 800131a:	e004      	b.n	8001326 <HAL_GPIO_Init+0x1fa>
 800131c:	2302      	movs	r3, #2
 800131e:	e002      	b.n	8001326 <HAL_GPIO_Init+0x1fa>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <HAL_GPIO_Init+0x1fa>
 8001324:	2300      	movs	r3, #0
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	f002 0203 	and.w	r2, r2, #3
 800132c:	0092      	lsls	r2, r2, #2
 800132e:	4093      	lsls	r3, r2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001336:	4937      	ldr	r1, [pc, #220]	; (8001414 <HAL_GPIO_Init+0x2e8>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001344:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_GPIO_Init+0x300>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001368:	4a30      	ldr	r2, [pc, #192]	; (800142c <HAL_GPIO_Init+0x300>)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_GPIO_Init+0x300>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001392:	4a26      	ldr	r2, [pc, #152]	; (800142c <HAL_GPIO_Init+0x300>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_GPIO_Init+0x300>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_GPIO_Init+0x300>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_GPIO_Init+0x300>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_GPIO_Init+0x300>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	3301      	adds	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f47f ae9d 	bne.w	800113c <HAL_GPIO_Init+0x10>
  }
}
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000
 8001418:	48000400 	.word	0x48000400
 800141c:	48000800 	.word	0x48000800
 8001420:	48000c00 	.word	0x48000c00
 8001424:	48001000 	.word	0x48001000
 8001428:	48001400 	.word	0x48001400
 800142c:	40010400 	.word	0x40010400

08001430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800144c:	e002      	b.n	8001454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	041a      	lsls	r2, r3, #16
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43d9      	mvns	r1, r3
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	400b      	ands	r3, r1
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e081      	b.n	80015aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff f936 	bl	800072c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2224      	movs	r2, #36	; 0x24
 80014c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	e006      	b.n	800151c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800151a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d104      	bne.n	800152e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800153c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001540:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001550:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69d9      	ldr	r1, [r3, #28]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1a      	ldr	r2, [r3, #32]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4798      	blx	r3
  }
}
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00f      	beq.n	8001628 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00a      	beq.n	8001628 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001626:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00f      	beq.n	8001652 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00a      	beq.n	8001652 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f043 0208 	orr.w	r2, r3, #8
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001650:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00f      	beq.n	800167c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00a      	beq.n	800167c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f043 0202 	orr.w	r2, r3, #2
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800167a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f003 030b 	and.w	r3, r3, #11
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800168c:	68f9      	ldr	r1, [r7, #12]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fb76 	bl	8001d80 <I2C_ITError>
  }
}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
 80016d0:	4613      	mov	r3, r2
 80016d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <I2C_Slave_ISR_IT+0x24>
 800173c:	2302      	movs	r3, #2
 800173e:	e0e1      	b.n	8001904 <I2C_Slave_ISR_IT+0x1e8>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800175c:	6939      	ldr	r1, [r7, #16]
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f9b4 	bl	8001acc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	d04b      	beq.n	8001806 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001774:	2b00      	cmp	r3, #0
 8001776:	d046      	beq.n	8001806 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177c:	b29b      	uxth	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d128      	bne.n	80017d4 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b28      	cmp	r3, #40	; 0x28
 800178c:	d108      	bne.n	80017a0 <I2C_Slave_ISR_IT+0x84>
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001794:	d104      	bne.n	80017a0 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001796:	6939      	ldr	r1, [r7, #16]
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fa9d 	bl	8001cd8 <I2C_ITListenCplt>
 800179e:	e031      	b.n	8001804 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b29      	cmp	r3, #41	; 0x29
 80017aa:	d10e      	bne.n	80017ca <I2C_Slave_ISR_IT+0xae>
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017b2:	d00a      	beq.n	80017ca <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2210      	movs	r2, #16
 80017ba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fbd6 	bl	8001f6e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f926 	bl	8001a14 <I2C_ITSlaveSeqCplt>
 80017c8:	e01c      	b.n	8001804 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2210      	movs	r2, #16
 80017d0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80017d2:	e08f      	b.n	80018f4 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2210      	movs	r2, #16
 80017da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	f043 0204 	orr.w	r2, r3, #4
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <I2C_Slave_ISR_IT+0xda>
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d17e      	bne.n	80018f4 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4619      	mov	r1, r3
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 fabf 	bl	8001d80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001802:	e077      	b.n	80018f4 <I2C_Slave_ISR_IT+0x1d8>
 8001804:	e076      	b.n	80018f4 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d02f      	beq.n	8001870 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001816:	2b00      	cmp	r3, #0
 8001818:	d02a      	beq.n	8001870 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d018      	beq.n	8001856 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d14b      	bne.n	80018f8 <I2C_Slave_ISR_IT+0x1dc>
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001866:	d047      	beq.n	80018f8 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f000 f8d3 	bl	8001a14 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800186e:	e043      	b.n	80018f8 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001884:	6939      	ldr	r1, [r7, #16]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 f840 	bl	800190c <I2C_ITAddrCplt>
 800188c:	e035      	b.n	80018fa <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d030      	beq.n	80018fa <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d02b      	beq.n	80018fa <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d018      	beq.n	80018de <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	851a      	strh	r2, [r3, #40]	; 0x28
 80018dc:	e00d      	b.n	80018fa <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d002      	beq.n	80018ec <I2C_Slave_ISR_IT+0x1d0>
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d106      	bne.n	80018fa <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f891 	bl	8001a14 <I2C_ITSlaveSeqCplt>
 80018f2:	e002      	b.n	80018fa <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80018f4:	bf00      	nop
 80018f6:	e000      	b.n	80018fa <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80018f8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001922:	2b28      	cmp	r3, #40	; 0x28
 8001924:	d16a      	bne.n	80019fc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	b29b      	uxth	r3, r3
 8001940:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001944:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	b29b      	uxth	r3, r3
 800194e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001952:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	b29b      	uxth	r3, r3
 800195c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001960:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d138      	bne.n	80019dc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800196a:	897b      	ldrh	r3, [r7, #10]
 800196c:	09db      	lsrs	r3, r3, #7
 800196e:	b29a      	uxth	r2, r3
 8001970:	89bb      	ldrh	r3, [r7, #12]
 8001972:	4053      	eors	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	f003 0306 	and.w	r3, r3, #6
 800197a:	2b00      	cmp	r3, #0
 800197c:	d11c      	bne.n	80019b8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800197e:	897b      	ldrh	r3, [r7, #10]
 8001980:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001990:	2b02      	cmp	r3, #2
 8001992:	d13b      	bne.n	8001a0c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2208      	movs	r2, #8
 80019a0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019aa:	89ba      	ldrh	r2, [r7, #12]
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fe87 	bl	80016c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80019b6:	e029      	b.n	8001a0c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80019b8:	893b      	ldrh	r3, [r7, #8]
 80019ba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80019bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 fb16 	bl	8001ff2 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019ce:	89ba      	ldrh	r2, [r7, #12]
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fe75 	bl	80016c4 <HAL_I2C_AddrCallback>
}
 80019da:	e017      	b.n	8001a0c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80019dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb06 	bl	8001ff2 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80019ee:	89ba      	ldrh	r2, [r7, #12]
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	4619      	mov	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fe65 	bl	80016c4 <HAL_I2C_AddrCallback>
}
 80019fa:	e007      	b.n	8001a0c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2208      	movs	r2, #8
 8001a02:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e00c      	b.n	8001a62 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b29      	cmp	r3, #41	; 0x29
 8001a6c:	d112      	bne.n	8001a94 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2228      	movs	r2, #40	; 0x28
 8001a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2221      	movs	r2, #33	; 0x21
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fab7 	bl	8001ff2 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fe05 	bl	800169c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001a92:	e017      	b.n	8001ac4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a9e:	d111      	bne.n	8001ac4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2228      	movs	r2, #40	; 0x28
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2222      	movs	r2, #34	; 0x22
 8001aac:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001aae:	2102      	movs	r1, #2
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fa9e 	bl	8001ff2 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fdf6 	bl	80016b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2220      	movs	r2, #32
 8001af0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b21      	cmp	r3, #33	; 0x21
 8001af6:	d002      	beq.n	8001afe <I2C_ITSlaveCplt+0x32>
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	2b29      	cmp	r3, #41	; 0x29
 8001afc:	d108      	bne.n	8001b10 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001afe:	f248 0101 	movw	r1, #32769	; 0x8001
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 fa75 	bl	8001ff2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2221      	movs	r2, #33	; 0x21
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b0e:	e00d      	b.n	8001b2c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b22      	cmp	r3, #34	; 0x22
 8001b14:	d002      	beq.n	8001b1c <I2C_ITSlaveCplt+0x50>
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	2b2a      	cmp	r3, #42	; 0x2a
 8001b1a:	d107      	bne.n	8001b2c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001b1c:	f248 0102 	movw	r1, #32770	; 0x8002
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fa66 	bl	8001ff2 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2222      	movs	r2, #34	; 0x22
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b3a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b62      	ldr	r3, [pc, #392]	; (8001cd0 <I2C_ITSlaveCplt+0x204>)
 8001b48:	400b      	ands	r3, r1
 8001b4a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fa0e 	bl	8001f6e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b6a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01f      	beq.n	8001bb4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b82:	e017      	b.n	8001bb4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d012      	beq.n	8001bb4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d020      	beq.n	8001c00 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f043 0204 	orr.w	r2, r3, #4
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	4619      	mov	r1, r3
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8a4 	bl	8001d80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b28      	cmp	r3, #40	; 0x28
 8001c42:	d141      	bne.n	8001cc8 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001c44:	6979      	ldr	r1, [r7, #20]
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f846 	bl	8001cd8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001c4c:	e03c      	b.n	8001cc8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c56:	d014      	beq.n	8001c82 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff fedb 	bl	8001a14 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <I2C_ITSlaveCplt+0x208>)
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fd30 	bl	80016e0 <HAL_I2C_ListenCpltCallback>
}
 8001c80:	e022      	b.n	8001cc8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b22      	cmp	r3, #34	; 0x22
 8001c8c:	d10e      	bne.n	8001cac <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2220      	movs	r2, #32
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fd03 	bl	80016b0 <HAL_I2C_SlaveRxCpltCallback>
}
 8001caa:	e00d      	b.n	8001cc8 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fcea 	bl	800169c <HAL_I2C_SlaveTxCpltCallback>
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	fe00e800 	.word	0xfe00e800
 8001cd4:	ffff0000 	.word	0xffff0000

08001cd8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <I2C_ITListenCplt+0xa4>)
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d022      	beq.n	8001d54 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d012      	beq.n	8001d54 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001d54:	f248 0103 	movw	r1, #32771	; 0x8003
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f94a 	bl	8001ff2 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2210      	movs	r2, #16
 8001d64:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fcb6 	bl	80016e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	ffff0000 	.word	0xffff0000

08001d80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <I2C_ITError+0x194>)
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	2b28      	cmp	r3, #40	; 0x28
 8001db6:	d005      	beq.n	8001dc4 <I2C_ITError+0x44>
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b29      	cmp	r3, #41	; 0x29
 8001dbc:	d002      	beq.n	8001dc4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8001dc2:	d10b      	bne.n	8001ddc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f913 	bl	8001ff2 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2228      	movs	r2, #40	; 0x28
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a50      	ldr	r2, [pc, #320]	; (8001f18 <I2C_ITError+0x198>)
 8001dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dda:	e011      	b.n	8001e00 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ddc:	f248 0103 	movw	r1, #32771	; 0x8003
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f906 	bl	8001ff2 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b60      	cmp	r3, #96	; 0x60
 8001df0:	d003      	beq.n	8001dfa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d039      	beq.n	8001e82 <I2C_ITError+0x102>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b11      	cmp	r3, #17
 8001e12:	d002      	beq.n	8001e1a <I2C_ITError+0x9a>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b21      	cmp	r3, #33	; 0x21
 8001e18:	d133      	bne.n	8001e82 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e28:	d107      	bne.n	8001e3a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e38:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f965 	bl	800110e <HAL_DMA_GetState>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d017      	beq.n	8001e7a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4e:	4a33      	ldr	r2, [pc, #204]	; (8001f1c <I2C_ITError+0x19c>)
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f8ee 	bl	8001040 <HAL_DMA_Abort_IT>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04d      	beq.n	8001f06 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e74:	4610      	mov	r0, r2
 8001e76:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001e78:	e045      	b.n	8001f06 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f850 	bl	8001f20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001e80:	e041      	b.n	8001f06 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d039      	beq.n	8001efe <I2C_ITError+0x17e>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b12      	cmp	r3, #18
 8001e8e:	d002      	beq.n	8001e96 <I2C_ITError+0x116>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b22      	cmp	r3, #34	; 0x22
 8001e94:	d133      	bne.n	8001efe <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea4:	d107      	bne.n	8001eb6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eb4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f927 	bl	800110e <HAL_DMA_GetState>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d017      	beq.n	8001ef6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <I2C_ITError+0x19c>)
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f8b0 	bl	8001040 <HAL_DMA_Abort_IT>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d011      	beq.n	8001f0a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001ef4:	e009      	b.n	8001f0a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f812 	bl	8001f20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001efc:	e005      	b.n	8001f0a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f80e 	bl	8001f20 <I2C_TreatErrorCallback>
  }
}
 8001f04:	e002      	b.n	8001f0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f06:	bf00      	nop
 8001f08:	e000      	b.n	8001f0c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f0a:	bf00      	nop
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	ffff0000 	.word	0xffff0000
 8001f18:	0800171d 	.word	0x0800171d
 8001f1c:	08001fb7 	.word	0x08001fb7

08001f20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b60      	cmp	r3, #96	; 0x60
 8001f32:	d10e      	bne.n	8001f52 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff fbdc 	bl	8001708 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f50:	e009      	b.n	8001f66 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fbc7 	bl	80016f4 <HAL_I2C_ErrorCallback>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d103      	bne.n	8001f8c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d007      	beq.n	8001faa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	619a      	str	r2, [r3, #24]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff ff9b 	bl	8001f20 <I2C_TreatErrorCallback>
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b085      	sub	sp, #20
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00f      	beq.n	800202c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002012:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002020:	2b28      	cmp	r3, #40	; 0x28
 8002022:	d003      	beq.n	800202c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800202a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00f      	beq.n	8002056 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800203c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800204a:	2b28      	cmp	r3, #40	; 0x28
 800204c:	d003      	beq.n	8002056 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002054:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002056:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800205a:	2b00      	cmp	r3, #0
 800205c:	da03      	bge.n	8002066 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002064:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	2b10      	cmp	r3, #16
 800206a:	d103      	bne.n	8002074 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002072:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	2b20      	cmp	r3, #32
 8002078:	d103      	bne.n	8002082 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f043 0320 	orr.w	r3, r3, #32
 8002080:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002082:	887b      	ldrh	r3, [r7, #2]
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d103      	bne.n	8002090 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800208e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6819      	ldr	r1, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	43da      	mvns	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	400a      	ands	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d138      	bne.n	8002136 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e032      	b.n	8002138 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2224      	movs	r2, #36	; 0x24
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002100:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6819      	ldr	r1, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e000      	b.n	8002138 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b20      	cmp	r3, #32
 8002158:	d139      	bne.n	80021ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002164:	2302      	movs	r3, #2
 8002166:	e033      	b.n	80021d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2224      	movs	r2, #36	; 0x24
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002196:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
  }
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d141      	bne.n	800226e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ea:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f6:	d131      	bne.n	800225c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f8:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021fe:	4a46      	ldr	r2, [pc, #280]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002204:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002208:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002210:	4a41      	ldr	r2, [pc, #260]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002216:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2232      	movs	r2, #50	; 0x32
 800221e:	fb02 f303 	mul.w	r3, r2, r3
 8002222:	4a3f      	ldr	r2, [pc, #252]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	3301      	adds	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222e:	e002      	b.n	8002236 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3b01      	subs	r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002242:	d102      	bne.n	800224a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f2      	bne.n	8002230 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800224a:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002256:	d158      	bne.n	800230a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e057      	b.n	800230c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800225c:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002262:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002268:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800226c:	e04d      	b.n	800230a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002274:	d141      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	d131      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800228a:	4a23      	ldr	r2, [pc, #140]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800229c:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2232      	movs	r2, #50	; 0x32
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	3301      	adds	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ba:	e002      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3b01      	subs	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d102      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f2      	bne.n	80022bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e2:	d112      	bne.n	800230a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e011      	b.n	800230c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022f8:	e007      	b.n	800230a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002308:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40007000 	.word	0x40007000
 800231c:	20000000 	.word	0x20000000
 8002320:	431bde83 	.word	0x431bde83

08002324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e306      	b.n	8002944 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d075      	beq.n	800242e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002342:	4b97      	ldr	r3, [pc, #604]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800234c:	4b94      	ldr	r3, [pc, #592]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b0c      	cmp	r3, #12
 800235a:	d102      	bne.n	8002362 <HAL_RCC_OscConfig+0x3e>
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d002      	beq.n	8002368 <HAL_RCC_OscConfig+0x44>
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d10b      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b8d      	ldr	r3, [pc, #564]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05b      	beq.n	800242c <HAL_RCC_OscConfig+0x108>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d157      	bne.n	800242c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e2e1      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x74>
 800238a:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a84      	ldr	r2, [pc, #528]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x98>
 80023a2:	4b7f      	ldr	r3, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a7e      	ldr	r2, [pc, #504]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b7c      	ldr	r3, [pc, #496]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7b      	ldr	r2, [pc, #492]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 80023bc:	4b78      	ldr	r3, [pc, #480]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a77      	ldr	r2, [pc, #476]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b75      	ldr	r3, [pc, #468]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a74      	ldr	r2, [pc, #464]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fc9a 	bl	8000d14 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fc96 	bl	8000d14 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e2a6      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f6:	4b6a      	ldr	r3, [pc, #424]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xc0>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fc86 	bl	8000d14 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe fc82 	bl	8000d14 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e292      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241e:	4b60      	ldr	r3, [pc, #384]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0xe8>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d075      	beq.n	8002526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243a:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002444:	4b56      	ldr	r3, [pc, #344]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b0c      	cmp	r3, #12
 8002452:	d102      	bne.n	800245a <HAL_RCC_OscConfig+0x136>
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d002      	beq.n	8002460 <HAL_RCC_OscConfig+0x13c>
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d11f      	bne.n	80024a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x154>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e265      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002478:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	4946      	ldr	r1, [pc, #280]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800248c:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <HAL_RCC_OscConfig+0x280>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fbf3 	bl	8000c7c <HAL_InitTick>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d043      	beq.n	8002524 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e251      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d023      	beq.n	80024f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a3c      	ldr	r2, [pc, #240]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fc2e 	bl	8000d14 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe fc2a 	bl	8000d14 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e23a      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ce:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	061b      	lsls	r3, r3, #24
 80024e8:	492d      	ldr	r1, [pc, #180]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
 80024ee:	e01a      	b.n	8002526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 80024f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fc0a 	bl	8000d14 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002504:	f7fe fc06 	bl	8000d14 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e216      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x1e0>
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d041      	beq.n	80025b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d01c      	beq.n	8002574 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 800253c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002540:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fe fbe3 	bl	8000d14 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002552:	f7fe fbdf 	bl	8000d14 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e1ef      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ef      	beq.n	8002552 <HAL_RCC_OscConfig+0x22e>
 8002572:	e020      	b.n	80025b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 8002576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_OscConfig+0x27c>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe fbc6 	bl	8000d14 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800258a:	e00d      	b.n	80025a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe fbc2 	bl	8000d14 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d906      	bls.n	80025a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1d2      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a8:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ea      	bne.n	800258c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80a6 	beq.w	8002710 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025c8:	4b84      	ldr	r3, [pc, #528]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2b4>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x2b6>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00d      	beq.n	80025fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b7f      	ldr	r3, [pc, #508]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	4a7e      	ldr	r2, [pc, #504]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6593      	str	r3, [r2, #88]	; 0x58
 80025ea:	4b7c      	ldr	r3, [pc, #496]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025fa:	4b79      	ldr	r3, [pc, #484]	; (80027e0 <HAL_RCC_OscConfig+0x4bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002606:	4b76      	ldr	r3, [pc, #472]	; (80027e0 <HAL_RCC_OscConfig+0x4bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a75      	ldr	r2, [pc, #468]	; (80027e0 <HAL_RCC_OscConfig+0x4bc>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7fe fb7f 	bl	8000d14 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe fb7b 	bl	8000d14 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e18b      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	4b6c      	ldr	r3, [pc, #432]	; (80027e0 <HAL_RCC_OscConfig+0x4bc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_RCC_OscConfig+0x32e>
 8002640:	4b66      	ldr	r3, [pc, #408]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	4a65      	ldr	r2, [pc, #404]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002650:	e024      	b.n	800269c <HAL_RCC_OscConfig+0x378>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d110      	bne.n	800267c <HAL_RCC_OscConfig+0x358>
 800265a:	4b60      	ldr	r3, [pc, #384]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	4a5e      	ldr	r2, [pc, #376]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	4a5a      	ldr	r2, [pc, #360]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267a:	e00f      	b.n	800269c <HAL_RCC_OscConfig+0x378>
 800267c:	4b57      	ldr	r3, [pc, #348]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a56      	ldr	r2, [pc, #344]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800268c:	4b53      	ldr	r3, [pc, #332]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002694:	f023 0304 	bic.w	r3, r3, #4
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d016      	beq.n	80026d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fb36 	bl	8000d14 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe fb32 	bl	8000d14 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e140      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c2:	4b46      	ldr	r3, [pc, #280]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ed      	beq.n	80026ac <HAL_RCC_OscConfig+0x388>
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fb1f 	bl	8000d14 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fb1b 	bl	8000d14 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e129      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1ed      	bne.n	80026da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	4a34      	ldr	r2, [pc, #208]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 800270a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d03c      	beq.n	8002796 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002724:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800272a:	4a2c      	ldr	r2, [pc, #176]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe faee 	bl	8000d14 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800273c:	f7fe faea 	bl	8000d14 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0fa      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <HAL_RCC_OscConfig+0x418>
 800275c:	e01b      	b.n	8002796 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe fad1 	bl	8000d14 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002776:	f7fe facd 	bl	8000d14 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e0dd      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 800278a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ef      	bne.n	8002776 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80d1 	beq.w	8002942 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027a0:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	f000 808b 	beq.w	80028c4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d15e      	bne.n	8002874 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_RCC_OscConfig+0x4b8>)
 80027bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe faa7 	bl	8000d14 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c8:	e00c      	b.n	80027e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe faa3 	bl	8000d14 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d905      	bls.n	80027e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0b3      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	4b59      	ldr	r3, [pc, #356]	; (800294c <HAL_RCC_OscConfig+0x628>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ec      	bne.n	80027ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f0:	4b56      	ldr	r3, [pc, #344]	; (800294c <HAL_RCC_OscConfig+0x628>)
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	4b56      	ldr	r3, [pc, #344]	; (8002950 <HAL_RCC_OscConfig+0x62c>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6a11      	ldr	r1, [r2, #32]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002800:	3a01      	subs	r2, #1
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	4311      	orrs	r1, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800280a:	0212      	lsls	r2, r2, #8
 800280c:	4311      	orrs	r1, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002812:	0852      	lsrs	r2, r2, #1
 8002814:	3a01      	subs	r2, #1
 8002816:	0552      	lsls	r2, r2, #21
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800281e:	0852      	lsrs	r2, r2, #1
 8002820:	3a01      	subs	r2, #1
 8002822:	0652      	lsls	r2, r2, #25
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800282a:	06d2      	lsls	r2, r2, #27
 800282c:	430a      	orrs	r2, r1
 800282e:	4947      	ldr	r1, [pc, #284]	; (800294c <HAL_RCC_OscConfig+0x628>)
 8002830:	4313      	orrs	r3, r2
 8002832:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002834:	4b45      	ldr	r3, [pc, #276]	; (800294c <HAL_RCC_OscConfig+0x628>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a44      	ldr	r2, [pc, #272]	; (800294c <HAL_RCC_OscConfig+0x628>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002840:	4b42      	ldr	r3, [pc, #264]	; (800294c <HAL_RCC_OscConfig+0x628>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a41      	ldr	r2, [pc, #260]	; (800294c <HAL_RCC_OscConfig+0x628>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fa62 	bl	8000d14 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fa5e 	bl	8000d14 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e06e      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	4b39      	ldr	r3, [pc, #228]	; (800294c <HAL_RCC_OscConfig+0x628>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x530>
 8002872:	e066      	b.n	8002942 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <HAL_RCC_OscConfig+0x628>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a34      	ldr	r2, [pc, #208]	; (800294c <HAL_RCC_OscConfig+0x628>)
 800287a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800287e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <HAL_RCC_OscConfig+0x628>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a31      	ldr	r2, [pc, #196]	; (800294c <HAL_RCC_OscConfig+0x628>)
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800288c:	4b2f      	ldr	r3, [pc, #188]	; (800294c <HAL_RCC_OscConfig+0x628>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a2e      	ldr	r2, [pc, #184]	; (800294c <HAL_RCC_OscConfig+0x628>)
 8002892:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fa3a 	bl	8000d14 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fa36 	bl	8000d14 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e046      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <HAL_RCC_OscConfig+0x628>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x580>
 80028c2:	e03e      	b.n	8002942 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e039      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028d0:	4b1e      	ldr	r3, [pc, #120]	; (800294c <HAL_RCC_OscConfig+0x628>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d12c      	bne.n	800293e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	3b01      	subs	r3, #1
 80028f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d123      	bne.n	800293e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d11b      	bne.n	800293e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d113      	bne.n	800293e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	085b      	lsrs	r3, r3, #1
 8002922:	3b01      	subs	r3, #1
 8002924:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d109      	bne.n	800293e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	3b01      	subs	r3, #1
 8002938:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	019f800c 	.word	0x019f800c

08002954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e11e      	b.n	8002baa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b91      	ldr	r3, [pc, #580]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d910      	bls.n	800299c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b8e      	ldr	r3, [pc, #568]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 020f 	bic.w	r2, r3, #15
 8002982:	498c      	ldr	r1, [pc, #560]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b8a      	ldr	r3, [pc, #552]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e106      	b.n	8002baa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d073      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d129      	bne.n	8002a04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b0:	4b81      	ldr	r3, [pc, #516]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0f4      	b.n	8002baa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029c0:	f000 f99e 	bl	8002d00 <RCC_GetSysClockFreqFromPLLSource>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4a7c      	ldr	r2, [pc, #496]	; (8002bbc <HAL_RCC_ClockConfig+0x268>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d93f      	bls.n	8002a4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029ce:	4b7a      	ldr	r3, [pc, #488]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d033      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d12f      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029ee:	4b72      	ldr	r3, [pc, #456]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f6:	4a70      	ldr	r2, [pc, #448]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 80029f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e024      	b.n	8002a4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d107      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a0c:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0c6      	b.n	8002baa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0be      	b.n	8002baa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a2c:	f000 f8ce 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4a61      	ldr	r2, [pc, #388]	; (8002bbc <HAL_RCC_ClockConfig+0x268>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d909      	bls.n	8002a4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a3a:	4b5f      	ldr	r3, [pc, #380]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a42:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b5a      	ldr	r3, [pc, #360]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4957      	ldr	r1, [pc, #348]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a60:	f7fe f958 	bl	8000d14 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7fe f954 	bl	8000d14 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e095      	b.n	8002baa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b4e      	ldr	r3, [pc, #312]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d023      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a42      	ldr	r2, [pc, #264]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ab2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ac0:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ac8:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ace:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4936      	ldr	r1, [pc, #216]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b80      	cmp	r3, #128	; 0x80
 8002ae8:	d105      	bne.n	8002af6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4a32      	ldr	r2, [pc, #200]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d21d      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 020f 	bic.w	r2, r3, #15
 8002b0c:	4929      	ldr	r1, [pc, #164]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b14:	f7fe f8fe 	bl	8000d14 <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1c:	f7fe f8fa 	bl	8000d14 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e03b      	b.n	8002baa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <HAL_RCC_ClockConfig+0x260>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d1ed      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4917      	ldr	r1, [pc, #92]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6a:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490f      	ldr	r1, [pc, #60]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b7e:	f000 f825 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <HAL_RCC_ClockConfig+0x264>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <HAL_RCC_ClockConfig+0x26c>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <HAL_RCC_ClockConfig+0x270>)
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_ClockConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe f86a 	bl	8000c7c <HAL_InitTick>
 8002ba8:	4603      	mov	r3, r0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	04c4b400 	.word	0x04c4b400
 8002bc0:	08005428 	.word	0x08005428
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d102      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	e047      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bf0:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	e03e      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d136      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	3301      	adds	r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d10c      	bne.n	8002c3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c20:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c2a:	68d2      	ldr	r2, [r2, #12]
 8002c2c:	0a12      	lsrs	r2, r2, #8
 8002c2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	617b      	str	r3, [r7, #20]
      break;
 8002c38:	e00c      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c3a:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c44:	68d2      	ldr	r2, [r2, #12]
 8002c46:	0a12      	lsrs	r2, r2, #8
 8002c48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c4c:	fb02 f303 	mul.w	r3, r2, r3
 8002c50:	617b      	str	r3, [r7, #20]
      break;
 8002c52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	0e5b      	lsrs	r3, r3, #25
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e001      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c74:	693b      	ldr	r3, [r7, #16]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	007a1200 	.word	0x007a1200

08002c90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	4904      	ldr	r1, [pc, #16]	; (8002cd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	08005438 	.word	0x08005438

08002cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cd8:	f7ff ffda 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0adb      	lsrs	r3, r3, #11
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4904      	ldr	r1, [pc, #16]	; (8002cfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08005438 	.word	0x08005438

08002d00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d10c      	bne.n	8002d3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d2e:	68d2      	ldr	r2, [r2, #12]
 8002d30:	0a12      	lsrs	r2, r2, #8
 8002d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	617b      	str	r3, [r7, #20]
    break;
 8002d3c:	e00c      	b.n	8002d58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	0a12      	lsrs	r2, r2, #8
 8002d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	617b      	str	r3, [r7, #20]
    break;
 8002d56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0e5b      	lsrs	r3, r3, #25
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	3301      	adds	r3, #1
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d72:	687b      	ldr	r3, [r7, #4]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40021000 	.word	0x40021000
 8002d84:	007a1200 	.word	0x007a1200
 8002d88:	00f42400 	.word	0x00f42400

08002d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d94:	2300      	movs	r3, #0
 8002d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d98:	2300      	movs	r3, #0
 8002d9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8098 	beq.w	8002eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b40      	ldr	r3, [pc, #256]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc6:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dd6:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a39      	ldr	r2, [pc, #228]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002de2:	f7fd ff97 	bl	8000d14 <HAL_GetTick>
 8002de6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de8:	e009      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dea:	f7fd ff93 	bl	8000d14 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d902      	bls.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	74fb      	strb	r3, [r7, #19]
        break;
 8002dfc:	e005      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0ef      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e0a:	7cfb      	ldrb	r3, [r7, #19]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d159      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e10:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01e      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d019      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e2c:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	4a1f      	ldr	r2, [pc, #124]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e48:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e58:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d016      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7fd ff53 	bl	8000d14 <HAL_GetTick>
 8002e6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e70:	e00b      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e72:	f7fd ff4f 	bl	8000d14 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d902      	bls.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	74fb      	strb	r3, [r7, #19]
            break;
 8002e88:	e006      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ec      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eac:	4903      	ldr	r1, [pc, #12]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	74bb      	strb	r3, [r7, #18]
 8002eba:	e005      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec8:	7c7b      	ldrb	r3, [r7, #17]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d105      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ece:	4ba7      	ldr	r3, [pc, #668]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	4aa6      	ldr	r2, [pc, #664]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee6:	4ba1      	ldr	r3, [pc, #644]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f023 0203 	bic.w	r2, r3, #3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	499d      	ldr	r1, [pc, #628]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f08:	4b98      	ldr	r3, [pc, #608]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0e:	f023 020c 	bic.w	r2, r3, #12
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4995      	ldr	r1, [pc, #596]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f2a:	4b90      	ldr	r3, [pc, #576]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	498c      	ldr	r1, [pc, #560]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f4c:	4b87      	ldr	r3, [pc, #540]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	4984      	ldr	r1, [pc, #528]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f6e:	4b7f      	ldr	r3, [pc, #508]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	497b      	ldr	r1, [pc, #492]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f90:	4b76      	ldr	r3, [pc, #472]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	4973      	ldr	r1, [pc, #460]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fb2:	4b6e      	ldr	r3, [pc, #440]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	496a      	ldr	r1, [pc, #424]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fd4:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	4962      	ldr	r1, [pc, #392]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	4959      	ldr	r1, [pc, #356]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003018:	4b54      	ldr	r3, [pc, #336]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003026:	4951      	ldr	r1, [pc, #324]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800303a:	4b4c      	ldr	r3, [pc, #304]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	4948      	ldr	r1, [pc, #288]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800305c:	4b43      	ldr	r3, [pc, #268]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4940      	ldr	r1, [pc, #256]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307a:	d105      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800307c:	4b3b      	ldr	r3, [pc, #236]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a3a      	ldr	r2, [pc, #232]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003086:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003094:	4b35      	ldr	r3, [pc, #212]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a2:	4932      	ldr	r1, [pc, #200]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b2:	d105      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a2c      	ldr	r2, [pc, #176]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	4924      	ldr	r1, [pc, #144]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ea:	d105      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a1e      	ldr	r2, [pc, #120]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d015      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	4916      	ldr	r1, [pc, #88]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003122:	d105      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800312e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d019      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800315a:	d109      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a02      	ldr	r2, [pc, #8]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003166:	60d3      	str	r3, [r2, #12]
 8003168:	e002      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d015      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800317c:	4b29      	ldr	r3, [pc, #164]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4926      	ldr	r1, [pc, #152]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319a:	d105      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800319c:	4b21      	ldr	r3, [pc, #132]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a20      	ldr	r2, [pc, #128]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	4918      	ldr	r1, [pc, #96]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d2:	d105      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031de:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fa:	490a      	ldr	r1, [pc, #40]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003216:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003218:	7cbb      	ldrb	r3, [r7, #18]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e042      	b.n	80032c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003240:	2b00      	cmp	r3, #0
 8003242:	d106      	bne.n	8003252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7fd fc73 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2224      	movs	r2, #36	; 0x24
 8003256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fc0c 	bl	8003a88 <UART_SetConfig>
 8003270:	4603      	mov	r3, r0
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e022      	b.n	80032c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fefc 	bl	8004080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 ff83 	bl	80041c4 <UART_CheckIdleState>
 80032be:	4603      	mov	r3, r0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b091      	sub	sp, #68	; 0x44
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032dc:	2b20      	cmp	r3, #32
 80032de:	f040 808c 	bne.w	80033fa <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_UART_Transmit_IT+0x26>
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e084      	b.n	80033fc <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_UART_Transmit_IT+0x38>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e07d      	b.n	80033fc <HAL_UART_Transmit_IT+0x134>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	88fa      	ldrh	r2, [r7, #6]
 8003312:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2221      	movs	r2, #33	; 0x21
 8003330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800333c:	d12e      	bne.n	800339c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003346:	d107      	bne.n	8003358 <HAL_UART_Transmit_IT+0x90>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <HAL_UART_Transmit_IT+0x140>)
 8003354:	675a      	str	r2, [r3, #116]	; 0x74
 8003356:	e002      	b.n	800335e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a2c      	ldr	r2, [pc, #176]	; (800340c <HAL_UART_Transmit_IT+0x144>)
 800335c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3308      	adds	r3, #8
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800337c:	63bb      	str	r3, [r7, #56]	; 0x38
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003386:	637a      	str	r2, [r7, #52]	; 0x34
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800338c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e5      	bne.n	8003366 <HAL_UART_Transmit_IT+0x9e>
 800339a:	e02c      	b.n	80033f6 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a4:	d107      	bne.n	80033b6 <HAL_UART_Transmit_IT+0xee>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a17      	ldr	r2, [pc, #92]	; (8003410 <HAL_UART_Transmit_IT+0x148>)
 80033b2:	675a      	str	r2, [r3, #116]	; 0x74
 80033b4:	e002      	b.n	80033bc <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4a16      	ldr	r2, [pc, #88]	; (8003414 <HAL_UART_Transmit_IT+0x14c>)
 80033ba:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	613b      	str	r3, [r7, #16]
   return(result);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e2:	623b      	str	r3, [r7, #32]
 80033e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	69f9      	ldr	r1, [r7, #28]
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e6      	bne.n	80033c4 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3744      	adds	r7, #68	; 0x44
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	0800473d 	.word	0x0800473d
 800340c:	0800465d 	.word	0x0800465d
 8003410:	0800459b 	.word	0x0800459b
 8003414:	080044e3 	.word	0x080044e3

08003418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b0ba      	sub	sp, #232	; 0xe8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800343e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003442:	f640 030f 	movw	r3, #2063	; 0x80f
 8003446:	4013      	ands	r3, r2
 8003448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800344c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11b      	bne.n	800348c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800346c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 82d6 	beq.w	8003a2e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
      }
      return;
 800348a:	e2d0      	b.n	8003a2e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800348c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 811f 	beq.w	80036d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003496:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800349a:	4b8b      	ldr	r3, [pc, #556]	; (80036c8 <HAL_UART_IRQHandler+0x2b0>)
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034a6:	4b89      	ldr	r3, [pc, #548]	; (80036cc <HAL_UART_IRQHandler+0x2b4>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8112 	beq.w	80036d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d011      	beq.n	80034e0 <HAL_UART_IRQHandler+0xc8>
 80034bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00b      	beq.n	80034e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2201      	movs	r2, #1
 80034ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d6:	f043 0201 	orr.w	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d011      	beq.n	8003510 <HAL_UART_IRQHandler+0xf8>
 80034ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00b      	beq.n	8003510 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2202      	movs	r2, #2
 80034fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003506:	f043 0204 	orr.w	r2, r3, #4
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d011      	beq.n	8003540 <HAL_UART_IRQHandler+0x128>
 800351c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00b      	beq.n	8003540 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2204      	movs	r2, #4
 800352e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003536:	f043 0202 	orr.w	r2, r3, #2
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d017      	beq.n	800357c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800354c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003558:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800355c:	4b5a      	ldr	r3, [pc, #360]	; (80036c8 <HAL_UART_IRQHandler+0x2b0>)
 800355e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00b      	beq.n	800357c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2208      	movs	r2, #8
 800356a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003572:	f043 0208 	orr.w	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003584:	2b00      	cmp	r3, #0
 8003586:	d012      	beq.n	80035ae <HAL_UART_IRQHandler+0x196>
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00c      	beq.n	80035ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800359c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a4:	f043 0220 	orr.w	r2, r3, #32
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 823c 	beq.w	8003a32 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d013      	beq.n	80035ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d105      	bne.n	80035de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d005      	beq.n	8003612 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800360a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800360e:	2b00      	cmp	r3, #0
 8003610:	d04f      	beq.n	80036b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fee9 	bl	80043ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d141      	bne.n	80036aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800363c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003652:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800365e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800366a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1d9      	bne.n	8003626 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d013      	beq.n	80036a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800367e:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <HAL_UART_IRQHandler+0x2b8>)
 8003680:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd fcda 	bl	8001040 <HAL_DMA_Abort_IT>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800369c:	4610      	mov	r0, r2
 800369e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	e00f      	b.n	80036c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9da 	bl	8003a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a8:	e00b      	b.n	80036c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f9d6 	bl	8003a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	e007      	b.n	80036c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f9d2 	bl	8003a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80036c0:	e1b7      	b.n	8003a32 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c2:	bf00      	nop
    return;
 80036c4:	e1b5      	b.n	8003a32 <HAL_UART_IRQHandler+0x61a>
 80036c6:	bf00      	nop
 80036c8:	10000001 	.word	0x10000001
 80036cc:	04000120 	.word	0x04000120
 80036d0:	080044b7 	.word	0x080044b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	f040 814a 	bne.w	8003972 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8143 	beq.w	8003972 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 813c 	beq.w	8003972 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2210      	movs	r2, #16
 8003700:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	f040 80b5 	bne.w	800387c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800371e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8187 	beq.w	8003a36 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800372e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003732:	429a      	cmp	r2, r3
 8003734:	f080 817f 	bcs.w	8003a36 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800373e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 8086 	bne.w	8003860 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800376c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800377e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003782:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800378a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800378e:	e841 2300 	strex	r3, r2, [r1]
 8003792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1da      	bne.n	8003754 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3308      	adds	r3, #8
 80037a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3308      	adds	r3, #8
 80037be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e1      	bne.n	800379e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3308      	adds	r3, #8
 80037e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3308      	adds	r3, #8
 80037fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003800:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003804:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800380c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e3      	bne.n	80037da <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800382e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003830:	f023 0310 	bic.w	r3, r3, #16
 8003834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003842:	65bb      	str	r3, [r7, #88]	; 0x58
 8003844:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e4      	bne.n	8003820 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd fb97 	bl	8000f8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800386c:	b29b      	uxth	r3, r3
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	b29b      	uxth	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f8fb 	bl	8003a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800387a:	e0dc      	b.n	8003a36 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003888:	b29b      	uxth	r3, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80ce 	beq.w	8003a3a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800389e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80c9 	beq.w	8003a3a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038ca:	647b      	str	r3, [r7, #68]	; 0x44
 80038cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e4      	bne.n	80038a8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3308      	adds	r3, #8
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	623b      	str	r3, [r7, #32]
   return(result);
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3308      	adds	r3, #8
 8003902:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003906:	633a      	str	r2, [r7, #48]	; 0x30
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800390c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e1      	bne.n	80038de <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	60fb      	str	r3, [r7, #12]
   return(result);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0310 	bic.w	r3, r3, #16
 8003942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	461a      	mov	r2, r3
 800394c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	69b9      	ldr	r1, [r7, #24]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	617b      	str	r3, [r7, #20]
   return(result);
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e4      	bne.n	800392e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f880 	bl	8003a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003970:	e063      	b.n	8003a3a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <HAL_UART_IRQHandler+0x584>
 800397e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003992:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 ff71 	bl	800487c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800399a:	e051      	b.n	8003a40 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800399c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d014      	beq.n	80039d2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d105      	bne.n	80039c0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80039b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d03a      	beq.n	8003a3e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
    }
    return;
 80039d0:	e035      	b.n	8003a3e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_UART_IRQHandler+0x5da>
 80039de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 ff1b 	bl	8004826 <UART_EndTransmit_IT>
    return;
 80039f0:	e026      	b.n	8003a40 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_UART_IRQHandler+0x5fa>
 80039fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 ff4a 	bl	80048a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a10:	e016      	b.n	8003a40 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d010      	beq.n	8003a40 <HAL_UART_IRQHandler+0x628>
 8003a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da0c      	bge.n	8003a40 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 ff32 	bl	8004890 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a2c:	e008      	b.n	8003a40 <HAL_UART_IRQHandler+0x628>
      return;
 8003a2e:	bf00      	nop
 8003a30:	e006      	b.n	8003a40 <HAL_UART_IRQHandler+0x628>
    return;
 8003a32:	bf00      	nop
 8003a34:	e004      	b.n	8003a40 <HAL_UART_IRQHandler+0x628>
      return;
 8003a36:	bf00      	nop
 8003a38:	e002      	b.n	8003a40 <HAL_UART_IRQHandler+0x628>
      return;
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <HAL_UART_IRQHandler+0x628>
    return;
 8003a3e:	bf00      	nop
  }
}
 8003a40:	37e8      	adds	r7, #232	; 0xe8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop

08003a48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a8c:	b08c      	sub	sp, #48	; 0x30
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4baa      	ldr	r3, [pc, #680]	; (8003d60 <UART_SetConfig+0x2d8>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a9f      	ldr	r2, [pc, #636]	; (8003d64 <UART_SetConfig+0x2dc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af0:	4313      	orrs	r3, r2
 8003af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003afe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	f023 010f 	bic.w	r1, r3, #15
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a90      	ldr	r2, [pc, #576]	; (8003d68 <UART_SetConfig+0x2e0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d125      	bne.n	8003b78 <UART_SetConfig+0xf0>
 8003b2c:	4b8f      	ldr	r3, [pc, #572]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d81a      	bhi.n	8003b70 <UART_SetConfig+0xe8>
 8003b3a:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <UART_SetConfig+0xb8>)
 8003b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b40:	08003b51 	.word	0x08003b51
 8003b44:	08003b61 	.word	0x08003b61
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b69 	.word	0x08003b69
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b56:	e116      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b5e:	e112      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003b60:	2304      	movs	r3, #4
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b66:	e10e      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003b68:	2308      	movs	r3, #8
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b6e:	e10a      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003b70:	2310      	movs	r3, #16
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b76:	e106      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a7c      	ldr	r2, [pc, #496]	; (8003d70 <UART_SetConfig+0x2e8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d138      	bne.n	8003bf4 <UART_SetConfig+0x16c>
 8003b82:	4b7a      	ldr	r3, [pc, #488]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b0c      	cmp	r3, #12
 8003b8e:	d82d      	bhi.n	8003bec <UART_SetConfig+0x164>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <UART_SetConfig+0x110>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bcd 	.word	0x08003bcd
 8003b9c:	08003bed 	.word	0x08003bed
 8003ba0:	08003bed 	.word	0x08003bed
 8003ba4:	08003bed 	.word	0x08003bed
 8003ba8:	08003bdd 	.word	0x08003bdd
 8003bac:	08003bed 	.word	0x08003bed
 8003bb0:	08003bed 	.word	0x08003bed
 8003bb4:	08003bed 	.word	0x08003bed
 8003bb8:	08003bd5 	.word	0x08003bd5
 8003bbc:	08003bed 	.word	0x08003bed
 8003bc0:	08003bed 	.word	0x08003bed
 8003bc4:	08003bed 	.word	0x08003bed
 8003bc8:	08003be5 	.word	0x08003be5
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bd2:	e0d8      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bda:	e0d4      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be2:	e0d0      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003be4:	2308      	movs	r3, #8
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bea:	e0cc      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003bec:	2310      	movs	r3, #16
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf2:	e0c8      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a5e      	ldr	r2, [pc, #376]	; (8003d74 <UART_SetConfig+0x2ec>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d125      	bne.n	8003c4a <UART_SetConfig+0x1c2>
 8003bfe:	4b5b      	ldr	r3, [pc, #364]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c08:	2b30      	cmp	r3, #48	; 0x30
 8003c0a:	d016      	beq.n	8003c3a <UART_SetConfig+0x1b2>
 8003c0c:	2b30      	cmp	r3, #48	; 0x30
 8003c0e:	d818      	bhi.n	8003c42 <UART_SetConfig+0x1ba>
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d00a      	beq.n	8003c2a <UART_SetConfig+0x1a2>
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d814      	bhi.n	8003c42 <UART_SetConfig+0x1ba>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <UART_SetConfig+0x19a>
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d008      	beq.n	8003c32 <UART_SetConfig+0x1aa>
 8003c20:	e00f      	b.n	8003c42 <UART_SetConfig+0x1ba>
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c28:	e0ad      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c30:	e0a9      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003c32:	2304      	movs	r3, #4
 8003c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c38:	e0a5      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c40:	e0a1      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003c42:	2310      	movs	r3, #16
 8003c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c48:	e09d      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a4a      	ldr	r2, [pc, #296]	; (8003d78 <UART_SetConfig+0x2f0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d125      	bne.n	8003ca0 <UART_SetConfig+0x218>
 8003c54:	4b45      	ldr	r3, [pc, #276]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c60:	d016      	beq.n	8003c90 <UART_SetConfig+0x208>
 8003c62:	2bc0      	cmp	r3, #192	; 0xc0
 8003c64:	d818      	bhi.n	8003c98 <UART_SetConfig+0x210>
 8003c66:	2b80      	cmp	r3, #128	; 0x80
 8003c68:	d00a      	beq.n	8003c80 <UART_SetConfig+0x1f8>
 8003c6a:	2b80      	cmp	r3, #128	; 0x80
 8003c6c:	d814      	bhi.n	8003c98 <UART_SetConfig+0x210>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <UART_SetConfig+0x1f0>
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d008      	beq.n	8003c88 <UART_SetConfig+0x200>
 8003c76:	e00f      	b.n	8003c98 <UART_SetConfig+0x210>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e082      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003c80:	2302      	movs	r3, #2
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e07e      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e07a      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003c90:	2308      	movs	r3, #8
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e076      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e072      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a35      	ldr	r2, [pc, #212]	; (8003d7c <UART_SetConfig+0x2f4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d12a      	bne.n	8003d00 <UART_SetConfig+0x278>
 8003caa:	4b30      	ldr	r3, [pc, #192]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb8:	d01a      	beq.n	8003cf0 <UART_SetConfig+0x268>
 8003cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cbe:	d81b      	bhi.n	8003cf8 <UART_SetConfig+0x270>
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc4:	d00c      	beq.n	8003ce0 <UART_SetConfig+0x258>
 8003cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cca:	d815      	bhi.n	8003cf8 <UART_SetConfig+0x270>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <UART_SetConfig+0x250>
 8003cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd4:	d008      	beq.n	8003ce8 <UART_SetConfig+0x260>
 8003cd6:	e00f      	b.n	8003cf8 <UART_SetConfig+0x270>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cde:	e052      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce6:	e04e      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cee:	e04a      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf6:	e046      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfe:	e042      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <UART_SetConfig+0x2dc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d13a      	bne.n	8003d80 <UART_SetConfig+0x2f8>
 8003d0a:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <UART_SetConfig+0x2e4>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d18:	d01a      	beq.n	8003d50 <UART_SetConfig+0x2c8>
 8003d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d1e:	d81b      	bhi.n	8003d58 <UART_SetConfig+0x2d0>
 8003d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d24:	d00c      	beq.n	8003d40 <UART_SetConfig+0x2b8>
 8003d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2a:	d815      	bhi.n	8003d58 <UART_SetConfig+0x2d0>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <UART_SetConfig+0x2b0>
 8003d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d34:	d008      	beq.n	8003d48 <UART_SetConfig+0x2c0>
 8003d36:	e00f      	b.n	8003d58 <UART_SetConfig+0x2d0>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3e:	e022      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003d40:	2302      	movs	r3, #2
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d46:	e01e      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4e:	e01a      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003d50:	2308      	movs	r3, #8
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d56:	e016      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5e:	e012      	b.n	8003d86 <UART_SetConfig+0x2fe>
 8003d60:	cfff69f3 	.word	0xcfff69f3
 8003d64:	40008000 	.word	0x40008000
 8003d68:	40013800 	.word	0x40013800
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40004400 	.word	0x40004400
 8003d74:	40004800 	.word	0x40004800
 8003d78:	40004c00 	.word	0x40004c00
 8003d7c:	40005000 	.word	0x40005000
 8003d80:	2310      	movs	r3, #16
 8003d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4aae      	ldr	r2, [pc, #696]	; (8004044 <UART_SetConfig+0x5bc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	f040 8097 	bne.w	8003ec0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d823      	bhi.n	8003de2 <UART_SetConfig+0x35a>
 8003d9a:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0x318>)
 8003d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da0:	08003dc5 	.word	0x08003dc5
 8003da4:	08003de3 	.word	0x08003de3
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003de3 	.word	0x08003de3
 8003db0:	08003dd3 	.word	0x08003dd3
 8003db4:	08003de3 	.word	0x08003de3
 8003db8:	08003de3 	.word	0x08003de3
 8003dbc:	08003de3 	.word	0x08003de3
 8003dc0:	08003ddb 	.word	0x08003ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc4:	f7fe ff70 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dca:	e010      	b.n	8003dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b9e      	ldr	r3, [pc, #632]	; (8004048 <UART_SetConfig+0x5c0>)
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dd0:	e00d      	b.n	8003dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7fe fefb 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dd8:	e009      	b.n	8003dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003de0:	e005      	b.n	8003dee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003dec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8130 	beq.w	8004056 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	4a94      	ldr	r2, [pc, #592]	; (800404c <UART_SetConfig+0x5c4>)
 8003dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e00:	461a      	mov	r2, r3
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d305      	bcc.n	8003e26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d903      	bls.n	8003e2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e2c:	e113      	b.n	8004056 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	2200      	movs	r2, #0
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	60fa      	str	r2, [r7, #12]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	4a84      	ldr	r2, [pc, #528]	; (800404c <UART_SetConfig+0x5c4>)
 8003e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2200      	movs	r2, #0
 8003e44:	603b      	str	r3, [r7, #0]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e50:	f7fc fa36 	bl	80002c0 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	020b      	lsls	r3, r1, #8
 8003e66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e6a:	0202      	lsls	r2, r0, #8
 8003e6c:	6979      	ldr	r1, [r7, #20]
 8003e6e:	6849      	ldr	r1, [r1, #4]
 8003e70:	0849      	lsrs	r1, r1, #1
 8003e72:	2000      	movs	r0, #0
 8003e74:	460c      	mov	r4, r1
 8003e76:	4605      	mov	r5, r0
 8003e78:	eb12 0804 	adds.w	r8, r2, r4
 8003e7c:	eb43 0905 	adc.w	r9, r3, r5
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	469a      	mov	sl, r3
 8003e88:	4693      	mov	fp, r2
 8003e8a:	4652      	mov	r2, sl
 8003e8c:	465b      	mov	r3, fp
 8003e8e:	4640      	mov	r0, r8
 8003e90:	4649      	mov	r1, r9
 8003e92:	f7fc fa15 	bl	80002c0 <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea4:	d308      	bcc.n	8003eb8 <UART_SetConfig+0x430>
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eac:	d204      	bcs.n	8003eb8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6a3a      	ldr	r2, [r7, #32]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	e0ce      	b.n	8004056 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ebe:	e0ca      	b.n	8004056 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec8:	d166      	bne.n	8003f98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d827      	bhi.n	8003f22 <UART_SetConfig+0x49a>
 8003ed2:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <UART_SetConfig+0x450>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f23 	.word	0x08003f23
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003f23 	.word	0x08003f23
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe fed4 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8003f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f02:	e014      	b.n	8003f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe fee6 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 8003f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f0a:	e010      	b.n	8003f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <UART_SetConfig+0x5c0>)
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f10:	e00d      	b.n	8003f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe fe5b 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8003f16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f18:	e009      	b.n	8003f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f20:	e005      	b.n	8003f2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8090 	beq.w	8004056 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	4a44      	ldr	r2, [pc, #272]	; (800404c <UART_SetConfig+0x5c4>)
 8003f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f48:	005a      	lsls	r2, r3, #1
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	085b      	lsrs	r3, r3, #1
 8003f50:	441a      	add	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	2b0f      	cmp	r3, #15
 8003f60:	d916      	bls.n	8003f90 <UART_SetConfig+0x508>
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f68:	d212      	bcs.n	8003f90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f023 030f 	bic.w	r3, r3, #15
 8003f72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	8bfb      	ldrh	r3, [r7, #30]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	8bfa      	ldrh	r2, [r7, #30]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	e062      	b.n	8004056 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f96:	e05e      	b.n	8004056 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d828      	bhi.n	8003ff2 <UART_SetConfig+0x56a>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <UART_SetConfig+0x520>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fcd 	.word	0x08003fcd
 8003fac:	08003fd5 	.word	0x08003fd5
 8003fb0:	08003fdd 	.word	0x08003fdd
 8003fb4:	08003ff3 	.word	0x08003ff3
 8003fb8:	08003fe3 	.word	0x08003fe3
 8003fbc:	08003ff3 	.word	0x08003ff3
 8003fc0:	08003ff3 	.word	0x08003ff3
 8003fc4:	08003ff3 	.word	0x08003ff3
 8003fc8:	08003feb 	.word	0x08003feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fcc:	f7fe fe6c 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8003fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fd2:	e014      	b.n	8003ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd4:	f7fe fe7e 	bl	8002cd4 <HAL_RCC_GetPCLK2Freq>
 8003fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fda:	e010      	b.n	8003ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <UART_SetConfig+0x5c0>)
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fe0:	e00d      	b.n	8003ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe2:	f7fe fdf3 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8003fe6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fe8:	e009      	b.n	8003ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ff0:	e005      	b.n	8003ffe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	2b00      	cmp	r3, #0
 8004002:	d028      	beq.n	8004056 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	4a10      	ldr	r2, [pc, #64]	; (800404c <UART_SetConfig+0x5c4>)
 800400a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800400e:	461a      	mov	r2, r3
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	fbb3 f2f2 	udiv	r2, r3, r2
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	441a      	add	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	2b0f      	cmp	r3, #15
 800402c:	d910      	bls.n	8004050 <UART_SetConfig+0x5c8>
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d20c      	bcs.n	8004050 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	b29a      	uxth	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60da      	str	r2, [r3, #12]
 8004040:	e009      	b.n	8004056 <UART_SetConfig+0x5ce>
 8004042:	bf00      	nop
 8004044:	40008000 	.word	0x40008000
 8004048:	00f42400 	.word	0x00f42400
 800404c:	08005440 	.word	0x08005440
      }
      else
      {
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2201      	movs	r2, #1
 800405a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2201      	movs	r2, #1
 8004062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004072:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004076:	4618      	mov	r0, r3
 8004078:	3730      	adds	r7, #48	; 0x30
 800407a:	46bd      	mov	sp, r7
 800407c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01a      	beq.n	8004196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800417e:	d10a      	bne.n	8004196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  }
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041d4:	f7fc fd9e 	bl	8000d14 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d10e      	bne.n	8004206 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f82f 	bl	800425a <UART_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e025      	b.n	8004252 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d10e      	bne.n	8004232 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f819 	bl	800425a <UART_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e00f      	b.n	8004252 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b09c      	sub	sp, #112	; 0x70
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426a:	e0a9      	b.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	f000 80a5 	beq.w	80043c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004276:	f7fc fd4d 	bl	8000d14 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <UART_WaitOnFlagUntilTimeout+0x32>
 8004286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004288:	2b00      	cmp	r3, #0
 800428a:	d140      	bne.n	800430e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042a0:	667b      	str	r3, [r7, #100]	; 0x64
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e6      	bne.n	800428c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	663b      	str	r3, [r7, #96]	; 0x60
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042de:	64ba      	str	r2, [r7, #72]	; 0x48
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e069      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d051      	beq.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432a:	d149      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004334:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800434a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
 8004356:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e6      	bne.n	8004336 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	613b      	str	r3, [r7, #16]
   return(result);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004388:	623a      	str	r2, [r7, #32]
 800438a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	69f9      	ldr	r1, [r7, #28]
 800438e:	6a3a      	ldr	r2, [r7, #32]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	61bb      	str	r3, [r7, #24]
   return(result);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e010      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4013      	ands	r3, r2
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	429a      	cmp	r2, r3
 80043dc:	f43f af46 	beq.w	800426c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3770      	adds	r7, #112	; 0x70
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b095      	sub	sp, #84	; 0x54
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	643b      	str	r3, [r7, #64]	; 0x40
 8004412:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004416:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e6      	bne.n	80043f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	61fb      	str	r3, [r7, #28]
   return(result);
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800444e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e3      	bne.n	8004424 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d118      	bne.n	8004496 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	60bb      	str	r3, [r7, #8]
   return(result);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f023 0310 	bic.w	r3, r3, #16
 8004478:	647b      	str	r3, [r7, #68]	; 0x44
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6979      	ldr	r1, [r7, #20]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	613b      	str	r3, [r7, #16]
   return(result);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e6      	bne.n	8004464 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80044aa:	bf00      	nop
 80044ac:	3754      	adds	r7, #84	; 0x54
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff fac1 	bl	8003a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b08f      	sub	sp, #60	; 0x3c
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f0:	2b21      	cmp	r3, #33	; 0x21
 80044f2:	d14c      	bne.n	800458e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d132      	bne.n	8004566 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	61fb      	str	r3, [r7, #28]
   return(result);
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004520:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e6      	bne.n	8004500 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	613b      	str	r3, [r7, #16]
   return(result);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e6      	bne.n	8004532 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004564:	e013      	b.n	800458e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800458e:	bf00      	nop
 8004590:	373c      	adds	r7, #60	; 0x3c
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800459a:	b480      	push	{r7}
 800459c:	b091      	sub	sp, #68	; 0x44
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a8:	2b21      	cmp	r3, #33	; 0x21
 80045aa:	d151      	bne.n	8004650 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d132      	bne.n	800461e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	623b      	str	r3, [r7, #32]
   return(result);
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d6:	633b      	str	r3, [r7, #48]	; 0x30
 80045d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e6      	bne.n	80045b8 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	69b9      	ldr	r1, [r7, #24]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	617b      	str	r3, [r7, #20]
   return(result);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e6      	bne.n	80045ea <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800461c:	e018      	b.n	8004650 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004650:	bf00      	nop
 8004652:	3744      	adds	r7, #68	; 0x44
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800465c:	b480      	push	{r7}
 800465e:	b091      	sub	sp, #68	; 0x44
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466a:	2b21      	cmp	r3, #33	; 0x21
 800466c:	d160      	bne.n	8004730 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004674:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004676:	e057      	b.n	8004728 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d133      	bne.n	80046ec <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3308      	adds	r3, #8
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	623b      	str	r3, [r7, #32]
   return(result);
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800469a:	63bb      	str	r3, [r7, #56]	; 0x38
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046a4:	633a      	str	r2, [r7, #48]	; 0x30
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e5      	bne.n	8004684 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	69b9      	ldr	r1, [r7, #24]
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	617b      	str	r3, [r7, #20]
   return(result);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e6      	bne.n	80046b8 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80046ea:	e021      	b.n	8004730 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d013      	beq.n	8004722 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	781a      	ldrb	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004722:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004724:	3b01      	subs	r3, #1
 8004726:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004728:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1a4      	bne.n	8004678 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800472e:	e7ff      	b.n	8004730 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004730:	bf00      	nop
 8004732:	3744      	adds	r7, #68	; 0x44
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b091      	sub	sp, #68	; 0x44
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800474a:	2b21      	cmp	r3, #33	; 0x21
 800474c:	d165      	bne.n	800481a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004754:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004756:	e05c      	b.n	8004812 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d133      	bne.n	80047cc <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	61fb      	str	r3, [r7, #28]
   return(result);
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004784:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800478a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e5      	bne.n	8004764 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ac:	633b      	str	r3, [r7, #48]	; 0x30
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	613b      	str	r3, [r7, #16]
   return(result);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e6      	bne.n	8004798 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80047ca:	e026      	b.n	800481a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d018      	beq.n	800480c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047de:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f4:	1c9a      	adds	r2, r3, #2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800480c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800480e:	3b01      	subs	r3, #1
 8004810:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004812:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004814:	2b00      	cmp	r3, #0
 8004816:	d19f      	bne.n	8004758 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004818:	e7ff      	b.n	800481a <UART_TxISR_16BIT_FIFOEN+0xde>
 800481a:	bf00      	nop
 800481c:	3744      	adds	r7, #68	; 0x44
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b088      	sub	sp, #32
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	60bb      	str	r3, [r7, #8]
   return(result);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	461a      	mov	r2, r3
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6979      	ldr	r1, [r7, #20]
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	613b      	str	r3, [r7, #16]
   return(result);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e6      	bne.n	800482e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff f8ea 	bl	8003a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004874:	bf00      	nop
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_UARTEx_DisableFifoMode+0x16>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e027      	b.n	800491e <HAL_UARTEx_DisableFifoMode+0x66>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2224      	movs	r2, #36	; 0x24
 80048da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80048fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800493e:	2302      	movs	r3, #2
 8004940:	e02d      	b.n	800499e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2224      	movs	r2, #36	; 0x24
 800494e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f850 	bl	8004a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e02d      	b.n	8004a1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2224      	movs	r2, #36	; 0x24
 80049ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f812 	bl	8004a24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d108      	bne.n	8004a46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a44:	e031      	b.n	8004aaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a46:	2308      	movs	r3, #8
 8004a48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	0e5b      	lsrs	r3, r3, #25
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	0f5b      	lsrs	r3, r3, #29
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a6e:	7bbb      	ldrb	r3, [r7, #14]
 8004a70:	7b3a      	ldrb	r2, [r7, #12]
 8004a72:	4911      	ldr	r1, [pc, #68]	; (8004ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8004a74:	5c8a      	ldrb	r2, [r1, r2]
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a7a:	7b3a      	ldrb	r2, [r7, #12]
 8004a7c:	490f      	ldr	r1, [pc, #60]	; (8004abc <UARTEx_SetNbDataToProcess+0x98>)
 8004a7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a80:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	7b7a      	ldrb	r2, [r7, #13]
 8004a90:	4909      	ldr	r1, [pc, #36]	; (8004ab8 <UARTEx_SetNbDataToProcess+0x94>)
 8004a92:	5c8a      	ldrb	r2, [r1, r2]
 8004a94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a98:	7b7a      	ldrb	r2, [r7, #13]
 8004a9a:	4908      	ldr	r1, [pc, #32]	; (8004abc <UARTEx_SetNbDataToProcess+0x98>)
 8004a9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	08005458 	.word	0x08005458
 8004abc:	08005460 	.word	0x08005460

08004ac0 <siprintf>:
 8004ac0:	b40e      	push	{r1, r2, r3}
 8004ac2:	b500      	push	{lr}
 8004ac4:	b09c      	sub	sp, #112	; 0x70
 8004ac6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ac8:	9002      	str	r0, [sp, #8]
 8004aca:	9006      	str	r0, [sp, #24]
 8004acc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ad0:	4809      	ldr	r0, [pc, #36]	; (8004af8 <siprintf+0x38>)
 8004ad2:	9107      	str	r1, [sp, #28]
 8004ad4:	9104      	str	r1, [sp, #16]
 8004ad6:	4909      	ldr	r1, [pc, #36]	; (8004afc <siprintf+0x3c>)
 8004ad8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004adc:	9105      	str	r1, [sp, #20]
 8004ade:	6800      	ldr	r0, [r0, #0]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	a902      	add	r1, sp, #8
 8004ae4:	f000 f992 	bl	8004e0c <_svfiprintf_r>
 8004ae8:	9b02      	ldr	r3, [sp, #8]
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	b01c      	add	sp, #112	; 0x70
 8004af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004af4:	b003      	add	sp, #12
 8004af6:	4770      	bx	lr
 8004af8:	20000058 	.word	0x20000058
 8004afc:	ffff0208 	.word	0xffff0208

08004b00 <memset>:
 8004b00:	4402      	add	r2, r0
 8004b02:	4603      	mov	r3, r0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d100      	bne.n	8004b0a <memset+0xa>
 8004b08:	4770      	bx	lr
 8004b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0e:	e7f9      	b.n	8004b04 <memset+0x4>

08004b10 <__errno>:
 8004b10:	4b01      	ldr	r3, [pc, #4]	; (8004b18 <__errno+0x8>)
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000058 	.word	0x20000058

08004b1c <__libc_init_array>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4d0d      	ldr	r5, [pc, #52]	; (8004b54 <__libc_init_array+0x38>)
 8004b20:	4c0d      	ldr	r4, [pc, #52]	; (8004b58 <__libc_init_array+0x3c>)
 8004b22:	1b64      	subs	r4, r4, r5
 8004b24:	10a4      	asrs	r4, r4, #2
 8004b26:	2600      	movs	r6, #0
 8004b28:	42a6      	cmp	r6, r4
 8004b2a:	d109      	bne.n	8004b40 <__libc_init_array+0x24>
 8004b2c:	4d0b      	ldr	r5, [pc, #44]	; (8004b5c <__libc_init_array+0x40>)
 8004b2e:	4c0c      	ldr	r4, [pc, #48]	; (8004b60 <__libc_init_array+0x44>)
 8004b30:	f000 fc6a 	bl	8005408 <_init>
 8004b34:	1b64      	subs	r4, r4, r5
 8004b36:	10a4      	asrs	r4, r4, #2
 8004b38:	2600      	movs	r6, #0
 8004b3a:	42a6      	cmp	r6, r4
 8004b3c:	d105      	bne.n	8004b4a <__libc_init_array+0x2e>
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b44:	4798      	blx	r3
 8004b46:	3601      	adds	r6, #1
 8004b48:	e7ee      	b.n	8004b28 <__libc_init_array+0xc>
 8004b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4e:	4798      	blx	r3
 8004b50:	3601      	adds	r6, #1
 8004b52:	e7f2      	b.n	8004b3a <__libc_init_array+0x1e>
 8004b54:	080054a4 	.word	0x080054a4
 8004b58:	080054a4 	.word	0x080054a4
 8004b5c:	080054a4 	.word	0x080054a4
 8004b60:	080054a8 	.word	0x080054a8

08004b64 <__retarget_lock_acquire_recursive>:
 8004b64:	4770      	bx	lr

08004b66 <__retarget_lock_release_recursive>:
 8004b66:	4770      	bx	lr

08004b68 <_free_r>:
 8004b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b6a:	2900      	cmp	r1, #0
 8004b6c:	d044      	beq.n	8004bf8 <_free_r+0x90>
 8004b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b72:	9001      	str	r0, [sp, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f1a1 0404 	sub.w	r4, r1, #4
 8004b7a:	bfb8      	it	lt
 8004b7c:	18e4      	addlt	r4, r4, r3
 8004b7e:	f000 f8df 	bl	8004d40 <__malloc_lock>
 8004b82:	4a1e      	ldr	r2, [pc, #120]	; (8004bfc <_free_r+0x94>)
 8004b84:	9801      	ldr	r0, [sp, #4]
 8004b86:	6813      	ldr	r3, [r2, #0]
 8004b88:	b933      	cbnz	r3, 8004b98 <_free_r+0x30>
 8004b8a:	6063      	str	r3, [r4, #4]
 8004b8c:	6014      	str	r4, [r2, #0]
 8004b8e:	b003      	add	sp, #12
 8004b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b94:	f000 b8da 	b.w	8004d4c <__malloc_unlock>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d908      	bls.n	8004bae <_free_r+0x46>
 8004b9c:	6825      	ldr	r5, [r4, #0]
 8004b9e:	1961      	adds	r1, r4, r5
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	bf01      	itttt	eq
 8004ba4:	6819      	ldreq	r1, [r3, #0]
 8004ba6:	685b      	ldreq	r3, [r3, #4]
 8004ba8:	1949      	addeq	r1, r1, r5
 8004baa:	6021      	streq	r1, [r4, #0]
 8004bac:	e7ed      	b.n	8004b8a <_free_r+0x22>
 8004bae:	461a      	mov	r2, r3
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b10b      	cbz	r3, 8004bb8 <_free_r+0x50>
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d9fa      	bls.n	8004bae <_free_r+0x46>
 8004bb8:	6811      	ldr	r1, [r2, #0]
 8004bba:	1855      	adds	r5, r2, r1
 8004bbc:	42a5      	cmp	r5, r4
 8004bbe:	d10b      	bne.n	8004bd8 <_free_r+0x70>
 8004bc0:	6824      	ldr	r4, [r4, #0]
 8004bc2:	4421      	add	r1, r4
 8004bc4:	1854      	adds	r4, r2, r1
 8004bc6:	42a3      	cmp	r3, r4
 8004bc8:	6011      	str	r1, [r2, #0]
 8004bca:	d1e0      	bne.n	8004b8e <_free_r+0x26>
 8004bcc:	681c      	ldr	r4, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	6053      	str	r3, [r2, #4]
 8004bd2:	440c      	add	r4, r1
 8004bd4:	6014      	str	r4, [r2, #0]
 8004bd6:	e7da      	b.n	8004b8e <_free_r+0x26>
 8004bd8:	d902      	bls.n	8004be0 <_free_r+0x78>
 8004bda:	230c      	movs	r3, #12
 8004bdc:	6003      	str	r3, [r0, #0]
 8004bde:	e7d6      	b.n	8004b8e <_free_r+0x26>
 8004be0:	6825      	ldr	r5, [r4, #0]
 8004be2:	1961      	adds	r1, r4, r5
 8004be4:	428b      	cmp	r3, r1
 8004be6:	bf04      	itt	eq
 8004be8:	6819      	ldreq	r1, [r3, #0]
 8004bea:	685b      	ldreq	r3, [r3, #4]
 8004bec:	6063      	str	r3, [r4, #4]
 8004bee:	bf04      	itt	eq
 8004bf0:	1949      	addeq	r1, r1, r5
 8004bf2:	6021      	streq	r1, [r4, #0]
 8004bf4:	6054      	str	r4, [r2, #4]
 8004bf6:	e7ca      	b.n	8004b8e <_free_r+0x26>
 8004bf8:	b003      	add	sp, #12
 8004bfa:	bd30      	pop	{r4, r5, pc}
 8004bfc:	2000029c 	.word	0x2000029c

08004c00 <sbrk_aligned>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4e0e      	ldr	r6, [pc, #56]	; (8004c3c <sbrk_aligned+0x3c>)
 8004c04:	460c      	mov	r4, r1
 8004c06:	6831      	ldr	r1, [r6, #0]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	b911      	cbnz	r1, 8004c12 <sbrk_aligned+0x12>
 8004c0c:	f000 fba6 	bl	800535c <_sbrk_r>
 8004c10:	6030      	str	r0, [r6, #0]
 8004c12:	4621      	mov	r1, r4
 8004c14:	4628      	mov	r0, r5
 8004c16:	f000 fba1 	bl	800535c <_sbrk_r>
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d00a      	beq.n	8004c34 <sbrk_aligned+0x34>
 8004c1e:	1cc4      	adds	r4, r0, #3
 8004c20:	f024 0403 	bic.w	r4, r4, #3
 8004c24:	42a0      	cmp	r0, r4
 8004c26:	d007      	beq.n	8004c38 <sbrk_aligned+0x38>
 8004c28:	1a21      	subs	r1, r4, r0
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f000 fb96 	bl	800535c <_sbrk_r>
 8004c30:	3001      	adds	r0, #1
 8004c32:	d101      	bne.n	8004c38 <sbrk_aligned+0x38>
 8004c34:	f04f 34ff 	mov.w	r4, #4294967295
 8004c38:	4620      	mov	r0, r4
 8004c3a:	bd70      	pop	{r4, r5, r6, pc}
 8004c3c:	200002a0 	.word	0x200002a0

08004c40 <_malloc_r>:
 8004c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c44:	1ccd      	adds	r5, r1, #3
 8004c46:	f025 0503 	bic.w	r5, r5, #3
 8004c4a:	3508      	adds	r5, #8
 8004c4c:	2d0c      	cmp	r5, #12
 8004c4e:	bf38      	it	cc
 8004c50:	250c      	movcc	r5, #12
 8004c52:	2d00      	cmp	r5, #0
 8004c54:	4607      	mov	r7, r0
 8004c56:	db01      	blt.n	8004c5c <_malloc_r+0x1c>
 8004c58:	42a9      	cmp	r1, r5
 8004c5a:	d905      	bls.n	8004c68 <_malloc_r+0x28>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	2600      	movs	r6, #0
 8004c62:	4630      	mov	r0, r6
 8004c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d3c <_malloc_r+0xfc>
 8004c6c:	f000 f868 	bl	8004d40 <__malloc_lock>
 8004c70:	f8d8 3000 	ldr.w	r3, [r8]
 8004c74:	461c      	mov	r4, r3
 8004c76:	bb5c      	cbnz	r4, 8004cd0 <_malloc_r+0x90>
 8004c78:	4629      	mov	r1, r5
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f7ff ffc0 	bl	8004c00 <sbrk_aligned>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	4604      	mov	r4, r0
 8004c84:	d155      	bne.n	8004d32 <_malloc_r+0xf2>
 8004c86:	f8d8 4000 	ldr.w	r4, [r8]
 8004c8a:	4626      	mov	r6, r4
 8004c8c:	2e00      	cmp	r6, #0
 8004c8e:	d145      	bne.n	8004d1c <_malloc_r+0xdc>
 8004c90:	2c00      	cmp	r4, #0
 8004c92:	d048      	beq.n	8004d26 <_malloc_r+0xe6>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	4631      	mov	r1, r6
 8004c98:	4638      	mov	r0, r7
 8004c9a:	eb04 0903 	add.w	r9, r4, r3
 8004c9e:	f000 fb5d 	bl	800535c <_sbrk_r>
 8004ca2:	4581      	cmp	r9, r0
 8004ca4:	d13f      	bne.n	8004d26 <_malloc_r+0xe6>
 8004ca6:	6821      	ldr	r1, [r4, #0]
 8004ca8:	1a6d      	subs	r5, r5, r1
 8004caa:	4629      	mov	r1, r5
 8004cac:	4638      	mov	r0, r7
 8004cae:	f7ff ffa7 	bl	8004c00 <sbrk_aligned>
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d037      	beq.n	8004d26 <_malloc_r+0xe6>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	442b      	add	r3, r5
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d038      	beq.n	8004d36 <_malloc_r+0xf6>
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	42a2      	cmp	r2, r4
 8004cc8:	d12b      	bne.n	8004d22 <_malloc_r+0xe2>
 8004cca:	2200      	movs	r2, #0
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	e00f      	b.n	8004cf0 <_malloc_r+0xb0>
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	1b52      	subs	r2, r2, r5
 8004cd4:	d41f      	bmi.n	8004d16 <_malloc_r+0xd6>
 8004cd6:	2a0b      	cmp	r2, #11
 8004cd8:	d917      	bls.n	8004d0a <_malloc_r+0xca>
 8004cda:	1961      	adds	r1, r4, r5
 8004cdc:	42a3      	cmp	r3, r4
 8004cde:	6025      	str	r5, [r4, #0]
 8004ce0:	bf18      	it	ne
 8004ce2:	6059      	strne	r1, [r3, #4]
 8004ce4:	6863      	ldr	r3, [r4, #4]
 8004ce6:	bf08      	it	eq
 8004ce8:	f8c8 1000 	streq.w	r1, [r8]
 8004cec:	5162      	str	r2, [r4, r5]
 8004cee:	604b      	str	r3, [r1, #4]
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	f104 060b 	add.w	r6, r4, #11
 8004cf6:	f000 f829 	bl	8004d4c <__malloc_unlock>
 8004cfa:	f026 0607 	bic.w	r6, r6, #7
 8004cfe:	1d23      	adds	r3, r4, #4
 8004d00:	1af2      	subs	r2, r6, r3
 8004d02:	d0ae      	beq.n	8004c62 <_malloc_r+0x22>
 8004d04:	1b9b      	subs	r3, r3, r6
 8004d06:	50a3      	str	r3, [r4, r2]
 8004d08:	e7ab      	b.n	8004c62 <_malloc_r+0x22>
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	6862      	ldr	r2, [r4, #4]
 8004d0e:	d1dd      	bne.n	8004ccc <_malloc_r+0x8c>
 8004d10:	f8c8 2000 	str.w	r2, [r8]
 8004d14:	e7ec      	b.n	8004cf0 <_malloc_r+0xb0>
 8004d16:	4623      	mov	r3, r4
 8004d18:	6864      	ldr	r4, [r4, #4]
 8004d1a:	e7ac      	b.n	8004c76 <_malloc_r+0x36>
 8004d1c:	4634      	mov	r4, r6
 8004d1e:	6876      	ldr	r6, [r6, #4]
 8004d20:	e7b4      	b.n	8004c8c <_malloc_r+0x4c>
 8004d22:	4613      	mov	r3, r2
 8004d24:	e7cc      	b.n	8004cc0 <_malloc_r+0x80>
 8004d26:	230c      	movs	r3, #12
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f000 f80e 	bl	8004d4c <__malloc_unlock>
 8004d30:	e797      	b.n	8004c62 <_malloc_r+0x22>
 8004d32:	6025      	str	r5, [r4, #0]
 8004d34:	e7dc      	b.n	8004cf0 <_malloc_r+0xb0>
 8004d36:	605b      	str	r3, [r3, #4]
 8004d38:	deff      	udf	#255	; 0xff
 8004d3a:	bf00      	nop
 8004d3c:	2000029c 	.word	0x2000029c

08004d40 <__malloc_lock>:
 8004d40:	4801      	ldr	r0, [pc, #4]	; (8004d48 <__malloc_lock+0x8>)
 8004d42:	f7ff bf0f 	b.w	8004b64 <__retarget_lock_acquire_recursive>
 8004d46:	bf00      	nop
 8004d48:	20000298 	.word	0x20000298

08004d4c <__malloc_unlock>:
 8004d4c:	4801      	ldr	r0, [pc, #4]	; (8004d54 <__malloc_unlock+0x8>)
 8004d4e:	f7ff bf0a 	b.w	8004b66 <__retarget_lock_release_recursive>
 8004d52:	bf00      	nop
 8004d54:	20000298 	.word	0x20000298

08004d58 <__ssputs_r>:
 8004d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5c:	688e      	ldr	r6, [r1, #8]
 8004d5e:	461f      	mov	r7, r3
 8004d60:	42be      	cmp	r6, r7
 8004d62:	680b      	ldr	r3, [r1, #0]
 8004d64:	4682      	mov	sl, r0
 8004d66:	460c      	mov	r4, r1
 8004d68:	4690      	mov	r8, r2
 8004d6a:	d82c      	bhi.n	8004dc6 <__ssputs_r+0x6e>
 8004d6c:	898a      	ldrh	r2, [r1, #12]
 8004d6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d72:	d026      	beq.n	8004dc2 <__ssputs_r+0x6a>
 8004d74:	6965      	ldr	r5, [r4, #20]
 8004d76:	6909      	ldr	r1, [r1, #16]
 8004d78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d7c:	eba3 0901 	sub.w	r9, r3, r1
 8004d80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d84:	1c7b      	adds	r3, r7, #1
 8004d86:	444b      	add	r3, r9
 8004d88:	106d      	asrs	r5, r5, #1
 8004d8a:	429d      	cmp	r5, r3
 8004d8c:	bf38      	it	cc
 8004d8e:	461d      	movcc	r5, r3
 8004d90:	0553      	lsls	r3, r2, #21
 8004d92:	d527      	bpl.n	8004de4 <__ssputs_r+0x8c>
 8004d94:	4629      	mov	r1, r5
 8004d96:	f7ff ff53 	bl	8004c40 <_malloc_r>
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	b360      	cbz	r0, 8004df8 <__ssputs_r+0xa0>
 8004d9e:	6921      	ldr	r1, [r4, #16]
 8004da0:	464a      	mov	r2, r9
 8004da2:	f000 faeb 	bl	800537c <memcpy>
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db0:	81a3      	strh	r3, [r4, #12]
 8004db2:	6126      	str	r6, [r4, #16]
 8004db4:	6165      	str	r5, [r4, #20]
 8004db6:	444e      	add	r6, r9
 8004db8:	eba5 0509 	sub.w	r5, r5, r9
 8004dbc:	6026      	str	r6, [r4, #0]
 8004dbe:	60a5      	str	r5, [r4, #8]
 8004dc0:	463e      	mov	r6, r7
 8004dc2:	42be      	cmp	r6, r7
 8004dc4:	d900      	bls.n	8004dc8 <__ssputs_r+0x70>
 8004dc6:	463e      	mov	r6, r7
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	4632      	mov	r2, r6
 8004dcc:	4641      	mov	r1, r8
 8004dce:	f000 faab 	bl	8005328 <memmove>
 8004dd2:	68a3      	ldr	r3, [r4, #8]
 8004dd4:	1b9b      	subs	r3, r3, r6
 8004dd6:	60a3      	str	r3, [r4, #8]
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	4433      	add	r3, r6
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	2000      	movs	r0, #0
 8004de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de4:	462a      	mov	r2, r5
 8004de6:	f000 fad7 	bl	8005398 <_realloc_r>
 8004dea:	4606      	mov	r6, r0
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d1e0      	bne.n	8004db2 <__ssputs_r+0x5a>
 8004df0:	6921      	ldr	r1, [r4, #16]
 8004df2:	4650      	mov	r0, sl
 8004df4:	f7ff feb8 	bl	8004b68 <_free_r>
 8004df8:	230c      	movs	r3, #12
 8004dfa:	f8ca 3000 	str.w	r3, [sl]
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	e7e9      	b.n	8004de0 <__ssputs_r+0x88>

08004e0c <_svfiprintf_r>:
 8004e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e10:	4698      	mov	r8, r3
 8004e12:	898b      	ldrh	r3, [r1, #12]
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	b09d      	sub	sp, #116	; 0x74
 8004e18:	4607      	mov	r7, r0
 8004e1a:	460d      	mov	r5, r1
 8004e1c:	4614      	mov	r4, r2
 8004e1e:	d50e      	bpl.n	8004e3e <_svfiprintf_r+0x32>
 8004e20:	690b      	ldr	r3, [r1, #16]
 8004e22:	b963      	cbnz	r3, 8004e3e <_svfiprintf_r+0x32>
 8004e24:	2140      	movs	r1, #64	; 0x40
 8004e26:	f7ff ff0b 	bl	8004c40 <_malloc_r>
 8004e2a:	6028      	str	r0, [r5, #0]
 8004e2c:	6128      	str	r0, [r5, #16]
 8004e2e:	b920      	cbnz	r0, 8004e3a <_svfiprintf_r+0x2e>
 8004e30:	230c      	movs	r3, #12
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	e0d0      	b.n	8004fdc <_svfiprintf_r+0x1d0>
 8004e3a:	2340      	movs	r3, #64	; 0x40
 8004e3c:	616b      	str	r3, [r5, #20]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	9309      	str	r3, [sp, #36]	; 0x24
 8004e42:	2320      	movs	r3, #32
 8004e44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e48:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e4c:	2330      	movs	r3, #48	; 0x30
 8004e4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ff4 <_svfiprintf_r+0x1e8>
 8004e52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e56:	f04f 0901 	mov.w	r9, #1
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	469a      	mov	sl, r3
 8004e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e62:	b10a      	cbz	r2, 8004e68 <_svfiprintf_r+0x5c>
 8004e64:	2a25      	cmp	r2, #37	; 0x25
 8004e66:	d1f9      	bne.n	8004e5c <_svfiprintf_r+0x50>
 8004e68:	ebba 0b04 	subs.w	fp, sl, r4
 8004e6c:	d00b      	beq.n	8004e86 <_svfiprintf_r+0x7a>
 8004e6e:	465b      	mov	r3, fp
 8004e70:	4622      	mov	r2, r4
 8004e72:	4629      	mov	r1, r5
 8004e74:	4638      	mov	r0, r7
 8004e76:	f7ff ff6f 	bl	8004d58 <__ssputs_r>
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	f000 80a9 	beq.w	8004fd2 <_svfiprintf_r+0x1c6>
 8004e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e82:	445a      	add	r2, fp
 8004e84:	9209      	str	r2, [sp, #36]	; 0x24
 8004e86:	f89a 3000 	ldrb.w	r3, [sl]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80a1 	beq.w	8004fd2 <_svfiprintf_r+0x1c6>
 8004e90:	2300      	movs	r3, #0
 8004e92:	f04f 32ff 	mov.w	r2, #4294967295
 8004e96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e9a:	f10a 0a01 	add.w	sl, sl, #1
 8004e9e:	9304      	str	r3, [sp, #16]
 8004ea0:	9307      	str	r3, [sp, #28]
 8004ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea8:	4654      	mov	r4, sl
 8004eaa:	2205      	movs	r2, #5
 8004eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb0:	4850      	ldr	r0, [pc, #320]	; (8004ff4 <_svfiprintf_r+0x1e8>)
 8004eb2:	f7fb f9b5 	bl	8000220 <memchr>
 8004eb6:	9a04      	ldr	r2, [sp, #16]
 8004eb8:	b9d8      	cbnz	r0, 8004ef2 <_svfiprintf_r+0xe6>
 8004eba:	06d0      	lsls	r0, r2, #27
 8004ebc:	bf44      	itt	mi
 8004ebe:	2320      	movmi	r3, #32
 8004ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec4:	0711      	lsls	r1, r2, #28
 8004ec6:	bf44      	itt	mi
 8004ec8:	232b      	movmi	r3, #43	; 0x2b
 8004eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ece:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed4:	d015      	beq.n	8004f02 <_svfiprintf_r+0xf6>
 8004ed6:	9a07      	ldr	r2, [sp, #28]
 8004ed8:	4654      	mov	r4, sl
 8004eda:	2000      	movs	r0, #0
 8004edc:	f04f 0c0a 	mov.w	ip, #10
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ee6:	3b30      	subs	r3, #48	; 0x30
 8004ee8:	2b09      	cmp	r3, #9
 8004eea:	d94d      	bls.n	8004f88 <_svfiprintf_r+0x17c>
 8004eec:	b1b0      	cbz	r0, 8004f1c <_svfiprintf_r+0x110>
 8004eee:	9207      	str	r2, [sp, #28]
 8004ef0:	e014      	b.n	8004f1c <_svfiprintf_r+0x110>
 8004ef2:	eba0 0308 	sub.w	r3, r0, r8
 8004ef6:	fa09 f303 	lsl.w	r3, r9, r3
 8004efa:	4313      	orrs	r3, r2
 8004efc:	9304      	str	r3, [sp, #16]
 8004efe:	46a2      	mov	sl, r4
 8004f00:	e7d2      	b.n	8004ea8 <_svfiprintf_r+0x9c>
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	1d19      	adds	r1, r3, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	9103      	str	r1, [sp, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bfbb      	ittet	lt
 8004f0e:	425b      	neglt	r3, r3
 8004f10:	f042 0202 	orrlt.w	r2, r2, #2
 8004f14:	9307      	strge	r3, [sp, #28]
 8004f16:	9307      	strlt	r3, [sp, #28]
 8004f18:	bfb8      	it	lt
 8004f1a:	9204      	strlt	r2, [sp, #16]
 8004f1c:	7823      	ldrb	r3, [r4, #0]
 8004f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f20:	d10c      	bne.n	8004f3c <_svfiprintf_r+0x130>
 8004f22:	7863      	ldrb	r3, [r4, #1]
 8004f24:	2b2a      	cmp	r3, #42	; 0x2a
 8004f26:	d134      	bne.n	8004f92 <_svfiprintf_r+0x186>
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	1d1a      	adds	r2, r3, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	9203      	str	r2, [sp, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bfb8      	it	lt
 8004f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f38:	3402      	adds	r4, #2
 8004f3a:	9305      	str	r3, [sp, #20]
 8004f3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005004 <_svfiprintf_r+0x1f8>
 8004f40:	7821      	ldrb	r1, [r4, #0]
 8004f42:	2203      	movs	r2, #3
 8004f44:	4650      	mov	r0, sl
 8004f46:	f7fb f96b 	bl	8000220 <memchr>
 8004f4a:	b138      	cbz	r0, 8004f5c <_svfiprintf_r+0x150>
 8004f4c:	9b04      	ldr	r3, [sp, #16]
 8004f4e:	eba0 000a 	sub.w	r0, r0, sl
 8004f52:	2240      	movs	r2, #64	; 0x40
 8004f54:	4082      	lsls	r2, r0
 8004f56:	4313      	orrs	r3, r2
 8004f58:	3401      	adds	r4, #1
 8004f5a:	9304      	str	r3, [sp, #16]
 8004f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f60:	4825      	ldr	r0, [pc, #148]	; (8004ff8 <_svfiprintf_r+0x1ec>)
 8004f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f66:	2206      	movs	r2, #6
 8004f68:	f7fb f95a 	bl	8000220 <memchr>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d038      	beq.n	8004fe2 <_svfiprintf_r+0x1d6>
 8004f70:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <_svfiprintf_r+0x1f0>)
 8004f72:	bb1b      	cbnz	r3, 8004fbc <_svfiprintf_r+0x1b0>
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	3307      	adds	r3, #7
 8004f78:	f023 0307 	bic.w	r3, r3, #7
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	9303      	str	r3, [sp, #12]
 8004f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f82:	4433      	add	r3, r6
 8004f84:	9309      	str	r3, [sp, #36]	; 0x24
 8004f86:	e768      	b.n	8004e5a <_svfiprintf_r+0x4e>
 8004f88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	2001      	movs	r0, #1
 8004f90:	e7a6      	b.n	8004ee0 <_svfiprintf_r+0xd4>
 8004f92:	2300      	movs	r3, #0
 8004f94:	3401      	adds	r4, #1
 8004f96:	9305      	str	r3, [sp, #20]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f04f 0c0a 	mov.w	ip, #10
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa4:	3a30      	subs	r2, #48	; 0x30
 8004fa6:	2a09      	cmp	r2, #9
 8004fa8:	d903      	bls.n	8004fb2 <_svfiprintf_r+0x1a6>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0c6      	beq.n	8004f3c <_svfiprintf_r+0x130>
 8004fae:	9105      	str	r1, [sp, #20]
 8004fb0:	e7c4      	b.n	8004f3c <_svfiprintf_r+0x130>
 8004fb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e7f0      	b.n	8004f9e <_svfiprintf_r+0x192>
 8004fbc:	ab03      	add	r3, sp, #12
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	462a      	mov	r2, r5
 8004fc2:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <_svfiprintf_r+0x1f4>)
 8004fc4:	a904      	add	r1, sp, #16
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	f3af 8000 	nop.w
 8004fcc:	1c42      	adds	r2, r0, #1
 8004fce:	4606      	mov	r6, r0
 8004fd0:	d1d6      	bne.n	8004f80 <_svfiprintf_r+0x174>
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	065b      	lsls	r3, r3, #25
 8004fd6:	f53f af2d 	bmi.w	8004e34 <_svfiprintf_r+0x28>
 8004fda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fdc:	b01d      	add	sp, #116	; 0x74
 8004fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe2:	ab03      	add	r3, sp, #12
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	462a      	mov	r2, r5
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <_svfiprintf_r+0x1f4>)
 8004fea:	a904      	add	r1, sp, #16
 8004fec:	4638      	mov	r0, r7
 8004fee:	f000 f879 	bl	80050e4 <_printf_i>
 8004ff2:	e7eb      	b.n	8004fcc <_svfiprintf_r+0x1c0>
 8004ff4:	08005468 	.word	0x08005468
 8004ff8:	08005472 	.word	0x08005472
 8004ffc:	00000000 	.word	0x00000000
 8005000:	08004d59 	.word	0x08004d59
 8005004:	0800546e 	.word	0x0800546e

08005008 <_printf_common>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	4616      	mov	r6, r2
 800500e:	4699      	mov	r9, r3
 8005010:	688a      	ldr	r2, [r1, #8]
 8005012:	690b      	ldr	r3, [r1, #16]
 8005014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005018:	4293      	cmp	r3, r2
 800501a:	bfb8      	it	lt
 800501c:	4613      	movlt	r3, r2
 800501e:	6033      	str	r3, [r6, #0]
 8005020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005024:	4607      	mov	r7, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b10a      	cbz	r2, 800502e <_printf_common+0x26>
 800502a:	3301      	adds	r3, #1
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	0699      	lsls	r1, r3, #26
 8005032:	bf42      	ittt	mi
 8005034:	6833      	ldrmi	r3, [r6, #0]
 8005036:	3302      	addmi	r3, #2
 8005038:	6033      	strmi	r3, [r6, #0]
 800503a:	6825      	ldr	r5, [r4, #0]
 800503c:	f015 0506 	ands.w	r5, r5, #6
 8005040:	d106      	bne.n	8005050 <_printf_common+0x48>
 8005042:	f104 0a19 	add.w	sl, r4, #25
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	6832      	ldr	r2, [r6, #0]
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	42ab      	cmp	r3, r5
 800504e:	dc26      	bgt.n	800509e <_printf_common+0x96>
 8005050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005054:	1e13      	subs	r3, r2, #0
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	bf18      	it	ne
 800505a:	2301      	movne	r3, #1
 800505c:	0692      	lsls	r2, r2, #26
 800505e:	d42b      	bmi.n	80050b8 <_printf_common+0xb0>
 8005060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	47c0      	blx	r8
 800506a:	3001      	adds	r0, #1
 800506c:	d01e      	beq.n	80050ac <_printf_common+0xa4>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	6922      	ldr	r2, [r4, #16]
 8005072:	f003 0306 	and.w	r3, r3, #6
 8005076:	2b04      	cmp	r3, #4
 8005078:	bf02      	ittt	eq
 800507a:	68e5      	ldreq	r5, [r4, #12]
 800507c:	6833      	ldreq	r3, [r6, #0]
 800507e:	1aed      	subeq	r5, r5, r3
 8005080:	68a3      	ldr	r3, [r4, #8]
 8005082:	bf0c      	ite	eq
 8005084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005088:	2500      	movne	r5, #0
 800508a:	4293      	cmp	r3, r2
 800508c:	bfc4      	itt	gt
 800508e:	1a9b      	subgt	r3, r3, r2
 8005090:	18ed      	addgt	r5, r5, r3
 8005092:	2600      	movs	r6, #0
 8005094:	341a      	adds	r4, #26
 8005096:	42b5      	cmp	r5, r6
 8005098:	d11a      	bne.n	80050d0 <_printf_common+0xc8>
 800509a:	2000      	movs	r0, #0
 800509c:	e008      	b.n	80050b0 <_printf_common+0xa8>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4649      	mov	r1, r9
 80050a4:	4638      	mov	r0, r7
 80050a6:	47c0      	blx	r8
 80050a8:	3001      	adds	r0, #1
 80050aa:	d103      	bne.n	80050b4 <_printf_common+0xac>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7c6      	b.n	8005046 <_printf_common+0x3e>
 80050b8:	18e1      	adds	r1, r4, r3
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	2030      	movs	r0, #48	; 0x30
 80050be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c2:	4422      	add	r2, r4
 80050c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050cc:	3302      	adds	r3, #2
 80050ce:	e7c7      	b.n	8005060 <_printf_common+0x58>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4622      	mov	r2, r4
 80050d4:	4649      	mov	r1, r9
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	3001      	adds	r0, #1
 80050dc:	d0e6      	beq.n	80050ac <_printf_common+0xa4>
 80050de:	3601      	adds	r6, #1
 80050e0:	e7d9      	b.n	8005096 <_printf_common+0x8e>
	...

080050e4 <_printf_i>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	7e0f      	ldrb	r7, [r1, #24]
 80050ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050ec:	2f78      	cmp	r7, #120	; 0x78
 80050ee:	4691      	mov	r9, r2
 80050f0:	4680      	mov	r8, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	469a      	mov	sl, r3
 80050f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050fa:	d807      	bhi.n	800510c <_printf_i+0x28>
 80050fc:	2f62      	cmp	r7, #98	; 0x62
 80050fe:	d80a      	bhi.n	8005116 <_printf_i+0x32>
 8005100:	2f00      	cmp	r7, #0
 8005102:	f000 80d4 	beq.w	80052ae <_printf_i+0x1ca>
 8005106:	2f58      	cmp	r7, #88	; 0x58
 8005108:	f000 80c0 	beq.w	800528c <_printf_i+0x1a8>
 800510c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005114:	e03a      	b.n	800518c <_printf_i+0xa8>
 8005116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511a:	2b15      	cmp	r3, #21
 800511c:	d8f6      	bhi.n	800510c <_printf_i+0x28>
 800511e:	a101      	add	r1, pc, #4	; (adr r1, 8005124 <_printf_i+0x40>)
 8005120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005124:	0800517d 	.word	0x0800517d
 8005128:	08005191 	.word	0x08005191
 800512c:	0800510d 	.word	0x0800510d
 8005130:	0800510d 	.word	0x0800510d
 8005134:	0800510d 	.word	0x0800510d
 8005138:	0800510d 	.word	0x0800510d
 800513c:	08005191 	.word	0x08005191
 8005140:	0800510d 	.word	0x0800510d
 8005144:	0800510d 	.word	0x0800510d
 8005148:	0800510d 	.word	0x0800510d
 800514c:	0800510d 	.word	0x0800510d
 8005150:	08005295 	.word	0x08005295
 8005154:	080051bd 	.word	0x080051bd
 8005158:	0800524f 	.word	0x0800524f
 800515c:	0800510d 	.word	0x0800510d
 8005160:	0800510d 	.word	0x0800510d
 8005164:	080052b7 	.word	0x080052b7
 8005168:	0800510d 	.word	0x0800510d
 800516c:	080051bd 	.word	0x080051bd
 8005170:	0800510d 	.word	0x0800510d
 8005174:	0800510d 	.word	0x0800510d
 8005178:	08005257 	.word	0x08005257
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	602a      	str	r2, [r5, #0]
 8005184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800518c:	2301      	movs	r3, #1
 800518e:	e09f      	b.n	80052d0 <_printf_i+0x1ec>
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	682b      	ldr	r3, [r5, #0]
 8005194:	0607      	lsls	r7, r0, #24
 8005196:	f103 0104 	add.w	r1, r3, #4
 800519a:	6029      	str	r1, [r5, #0]
 800519c:	d501      	bpl.n	80051a2 <_printf_i+0xbe>
 800519e:	681e      	ldr	r6, [r3, #0]
 80051a0:	e003      	b.n	80051aa <_printf_i+0xc6>
 80051a2:	0646      	lsls	r6, r0, #25
 80051a4:	d5fb      	bpl.n	800519e <_printf_i+0xba>
 80051a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	da03      	bge.n	80051b6 <_printf_i+0xd2>
 80051ae:	232d      	movs	r3, #45	; 0x2d
 80051b0:	4276      	negs	r6, r6
 80051b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b6:	485a      	ldr	r0, [pc, #360]	; (8005320 <_printf_i+0x23c>)
 80051b8:	230a      	movs	r3, #10
 80051ba:	e012      	b.n	80051e2 <_printf_i+0xfe>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	6820      	ldr	r0, [r4, #0]
 80051c0:	1d19      	adds	r1, r3, #4
 80051c2:	6029      	str	r1, [r5, #0]
 80051c4:	0605      	lsls	r5, r0, #24
 80051c6:	d501      	bpl.n	80051cc <_printf_i+0xe8>
 80051c8:	681e      	ldr	r6, [r3, #0]
 80051ca:	e002      	b.n	80051d2 <_printf_i+0xee>
 80051cc:	0641      	lsls	r1, r0, #25
 80051ce:	d5fb      	bpl.n	80051c8 <_printf_i+0xe4>
 80051d0:	881e      	ldrh	r6, [r3, #0]
 80051d2:	4853      	ldr	r0, [pc, #332]	; (8005320 <_printf_i+0x23c>)
 80051d4:	2f6f      	cmp	r7, #111	; 0x6f
 80051d6:	bf0c      	ite	eq
 80051d8:	2308      	moveq	r3, #8
 80051da:	230a      	movne	r3, #10
 80051dc:	2100      	movs	r1, #0
 80051de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e2:	6865      	ldr	r5, [r4, #4]
 80051e4:	60a5      	str	r5, [r4, #8]
 80051e6:	2d00      	cmp	r5, #0
 80051e8:	bfa2      	ittt	ge
 80051ea:	6821      	ldrge	r1, [r4, #0]
 80051ec:	f021 0104 	bicge.w	r1, r1, #4
 80051f0:	6021      	strge	r1, [r4, #0]
 80051f2:	b90e      	cbnz	r6, 80051f8 <_printf_i+0x114>
 80051f4:	2d00      	cmp	r5, #0
 80051f6:	d04b      	beq.n	8005290 <_printf_i+0x1ac>
 80051f8:	4615      	mov	r5, r2
 80051fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80051fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005202:	5dc7      	ldrb	r7, [r0, r7]
 8005204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005208:	4637      	mov	r7, r6
 800520a:	42bb      	cmp	r3, r7
 800520c:	460e      	mov	r6, r1
 800520e:	d9f4      	bls.n	80051fa <_printf_i+0x116>
 8005210:	2b08      	cmp	r3, #8
 8005212:	d10b      	bne.n	800522c <_printf_i+0x148>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	07de      	lsls	r6, r3, #31
 8005218:	d508      	bpl.n	800522c <_printf_i+0x148>
 800521a:	6923      	ldr	r3, [r4, #16]
 800521c:	6861      	ldr	r1, [r4, #4]
 800521e:	4299      	cmp	r1, r3
 8005220:	bfde      	ittt	le
 8005222:	2330      	movle	r3, #48	; 0x30
 8005224:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005228:	f105 35ff 	addle.w	r5, r5, #4294967295
 800522c:	1b52      	subs	r2, r2, r5
 800522e:	6122      	str	r2, [r4, #16]
 8005230:	f8cd a000 	str.w	sl, [sp]
 8005234:	464b      	mov	r3, r9
 8005236:	aa03      	add	r2, sp, #12
 8005238:	4621      	mov	r1, r4
 800523a:	4640      	mov	r0, r8
 800523c:	f7ff fee4 	bl	8005008 <_printf_common>
 8005240:	3001      	adds	r0, #1
 8005242:	d14a      	bne.n	80052da <_printf_i+0x1f6>
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	b004      	add	sp, #16
 800524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	f043 0320 	orr.w	r3, r3, #32
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	4833      	ldr	r0, [pc, #204]	; (8005324 <_printf_i+0x240>)
 8005258:	2778      	movs	r7, #120	; 0x78
 800525a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	6829      	ldr	r1, [r5, #0]
 8005262:	061f      	lsls	r7, r3, #24
 8005264:	f851 6b04 	ldr.w	r6, [r1], #4
 8005268:	d402      	bmi.n	8005270 <_printf_i+0x18c>
 800526a:	065f      	lsls	r7, r3, #25
 800526c:	bf48      	it	mi
 800526e:	b2b6      	uxthmi	r6, r6
 8005270:	07df      	lsls	r7, r3, #31
 8005272:	bf48      	it	mi
 8005274:	f043 0320 	orrmi.w	r3, r3, #32
 8005278:	6029      	str	r1, [r5, #0]
 800527a:	bf48      	it	mi
 800527c:	6023      	strmi	r3, [r4, #0]
 800527e:	b91e      	cbnz	r6, 8005288 <_printf_i+0x1a4>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	f023 0320 	bic.w	r3, r3, #32
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	2310      	movs	r3, #16
 800528a:	e7a7      	b.n	80051dc <_printf_i+0xf8>
 800528c:	4824      	ldr	r0, [pc, #144]	; (8005320 <_printf_i+0x23c>)
 800528e:	e7e4      	b.n	800525a <_printf_i+0x176>
 8005290:	4615      	mov	r5, r2
 8005292:	e7bd      	b.n	8005210 <_printf_i+0x12c>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	6826      	ldr	r6, [r4, #0]
 8005298:	6961      	ldr	r1, [r4, #20]
 800529a:	1d18      	adds	r0, r3, #4
 800529c:	6028      	str	r0, [r5, #0]
 800529e:	0635      	lsls	r5, r6, #24
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	d501      	bpl.n	80052a8 <_printf_i+0x1c4>
 80052a4:	6019      	str	r1, [r3, #0]
 80052a6:	e002      	b.n	80052ae <_printf_i+0x1ca>
 80052a8:	0670      	lsls	r0, r6, #25
 80052aa:	d5fb      	bpl.n	80052a4 <_printf_i+0x1c0>
 80052ac:	8019      	strh	r1, [r3, #0]
 80052ae:	2300      	movs	r3, #0
 80052b0:	6123      	str	r3, [r4, #16]
 80052b2:	4615      	mov	r5, r2
 80052b4:	e7bc      	b.n	8005230 <_printf_i+0x14c>
 80052b6:	682b      	ldr	r3, [r5, #0]
 80052b8:	1d1a      	adds	r2, r3, #4
 80052ba:	602a      	str	r2, [r5, #0]
 80052bc:	681d      	ldr	r5, [r3, #0]
 80052be:	6862      	ldr	r2, [r4, #4]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4628      	mov	r0, r5
 80052c4:	f7fa ffac 	bl	8000220 <memchr>
 80052c8:	b108      	cbz	r0, 80052ce <_printf_i+0x1ea>
 80052ca:	1b40      	subs	r0, r0, r5
 80052cc:	6060      	str	r0, [r4, #4]
 80052ce:	6863      	ldr	r3, [r4, #4]
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	2300      	movs	r3, #0
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d8:	e7aa      	b.n	8005230 <_printf_i+0x14c>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	462a      	mov	r2, r5
 80052de:	4649      	mov	r1, r9
 80052e0:	4640      	mov	r0, r8
 80052e2:	47d0      	blx	sl
 80052e4:	3001      	adds	r0, #1
 80052e6:	d0ad      	beq.n	8005244 <_printf_i+0x160>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	079b      	lsls	r3, r3, #30
 80052ec:	d413      	bmi.n	8005316 <_printf_i+0x232>
 80052ee:	68e0      	ldr	r0, [r4, #12]
 80052f0:	9b03      	ldr	r3, [sp, #12]
 80052f2:	4298      	cmp	r0, r3
 80052f4:	bfb8      	it	lt
 80052f6:	4618      	movlt	r0, r3
 80052f8:	e7a6      	b.n	8005248 <_printf_i+0x164>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4632      	mov	r2, r6
 80052fe:	4649      	mov	r1, r9
 8005300:	4640      	mov	r0, r8
 8005302:	47d0      	blx	sl
 8005304:	3001      	adds	r0, #1
 8005306:	d09d      	beq.n	8005244 <_printf_i+0x160>
 8005308:	3501      	adds	r5, #1
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	9903      	ldr	r1, [sp, #12]
 800530e:	1a5b      	subs	r3, r3, r1
 8005310:	42ab      	cmp	r3, r5
 8005312:	dcf2      	bgt.n	80052fa <_printf_i+0x216>
 8005314:	e7eb      	b.n	80052ee <_printf_i+0x20a>
 8005316:	2500      	movs	r5, #0
 8005318:	f104 0619 	add.w	r6, r4, #25
 800531c:	e7f5      	b.n	800530a <_printf_i+0x226>
 800531e:	bf00      	nop
 8005320:	08005479 	.word	0x08005479
 8005324:	0800548a 	.word	0x0800548a

08005328 <memmove>:
 8005328:	4288      	cmp	r0, r1
 800532a:	b510      	push	{r4, lr}
 800532c:	eb01 0402 	add.w	r4, r1, r2
 8005330:	d902      	bls.n	8005338 <memmove+0x10>
 8005332:	4284      	cmp	r4, r0
 8005334:	4623      	mov	r3, r4
 8005336:	d807      	bhi.n	8005348 <memmove+0x20>
 8005338:	1e43      	subs	r3, r0, #1
 800533a:	42a1      	cmp	r1, r4
 800533c:	d008      	beq.n	8005350 <memmove+0x28>
 800533e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005346:	e7f8      	b.n	800533a <memmove+0x12>
 8005348:	4402      	add	r2, r0
 800534a:	4601      	mov	r1, r0
 800534c:	428a      	cmp	r2, r1
 800534e:	d100      	bne.n	8005352 <memmove+0x2a>
 8005350:	bd10      	pop	{r4, pc}
 8005352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800535a:	e7f7      	b.n	800534c <memmove+0x24>

0800535c <_sbrk_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4d06      	ldr	r5, [pc, #24]	; (8005378 <_sbrk_r+0x1c>)
 8005360:	2300      	movs	r3, #0
 8005362:	4604      	mov	r4, r0
 8005364:	4608      	mov	r0, r1
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	f7fb fb52 	bl	8000a10 <_sbrk>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_sbrk_r+0x1a>
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	b103      	cbz	r3, 8005376 <_sbrk_r+0x1a>
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	20000294 	.word	0x20000294

0800537c <memcpy>:
 800537c:	440a      	add	r2, r1
 800537e:	4291      	cmp	r1, r2
 8005380:	f100 33ff 	add.w	r3, r0, #4294967295
 8005384:	d100      	bne.n	8005388 <memcpy+0xc>
 8005386:	4770      	bx	lr
 8005388:	b510      	push	{r4, lr}
 800538a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800538e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005392:	4291      	cmp	r1, r2
 8005394:	d1f9      	bne.n	800538a <memcpy+0xe>
 8005396:	bd10      	pop	{r4, pc}

08005398 <_realloc_r>:
 8005398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539c:	4680      	mov	r8, r0
 800539e:	4614      	mov	r4, r2
 80053a0:	460e      	mov	r6, r1
 80053a2:	b921      	cbnz	r1, 80053ae <_realloc_r+0x16>
 80053a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053a8:	4611      	mov	r1, r2
 80053aa:	f7ff bc49 	b.w	8004c40 <_malloc_r>
 80053ae:	b92a      	cbnz	r2, 80053bc <_realloc_r+0x24>
 80053b0:	f7ff fbda 	bl	8004b68 <_free_r>
 80053b4:	4625      	mov	r5, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053bc:	f000 f81b 	bl	80053f6 <_malloc_usable_size_r>
 80053c0:	4284      	cmp	r4, r0
 80053c2:	4607      	mov	r7, r0
 80053c4:	d802      	bhi.n	80053cc <_realloc_r+0x34>
 80053c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053ca:	d812      	bhi.n	80053f2 <_realloc_r+0x5a>
 80053cc:	4621      	mov	r1, r4
 80053ce:	4640      	mov	r0, r8
 80053d0:	f7ff fc36 	bl	8004c40 <_malloc_r>
 80053d4:	4605      	mov	r5, r0
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d0ed      	beq.n	80053b6 <_realloc_r+0x1e>
 80053da:	42bc      	cmp	r4, r7
 80053dc:	4622      	mov	r2, r4
 80053de:	4631      	mov	r1, r6
 80053e0:	bf28      	it	cs
 80053e2:	463a      	movcs	r2, r7
 80053e4:	f7ff ffca 	bl	800537c <memcpy>
 80053e8:	4631      	mov	r1, r6
 80053ea:	4640      	mov	r0, r8
 80053ec:	f7ff fbbc 	bl	8004b68 <_free_r>
 80053f0:	e7e1      	b.n	80053b6 <_realloc_r+0x1e>
 80053f2:	4635      	mov	r5, r6
 80053f4:	e7df      	b.n	80053b6 <_realloc_r+0x1e>

080053f6 <_malloc_usable_size_r>:
 80053f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053fa:	1f18      	subs	r0, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bfbc      	itt	lt
 8005400:	580b      	ldrlt	r3, [r1, r0]
 8005402:	18c0      	addlt	r0, r0, r3
 8005404:	4770      	bx	lr
	...

08005408 <_init>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	bf00      	nop
 800540c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540e:	bc08      	pop	{r3}
 8005410:	469e      	mov	lr, r3
 8005412:	4770      	bx	lr

08005414 <_fini>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr
